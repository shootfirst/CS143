# start of generated code for cool programs
	.data
	.align	2
	.globl	class_nameTab
	.globl	Main_protObj
	.globl	Int_protObj
	.globl	String_protObj
	.globl	bool_const0
	.globl	bool_const1
	.globl	_int_tag
	.globl	_bool_tag
	.globl	_string_tag
_int_tag:
	.word	10
_bool_tag:
	.word	11
_string_tag:
	.word	12
	.globl	_MemMgr_INITIALIZER
_MemMgr_INITIALIZER:
	.word	_GenGC_Init
	.globl	_MemMgr_COLLECTOR
_MemMgr_COLLECTOR:
	.word	_GenGC_Collect
	.globl	_MemMgr_TEST
_MemMgr_TEST:
	.word	0
	.word	-1
str_const75:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const1
	.byte	0	
	.align	2
	.word	-1
str_const74:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Main"
	.byte	0	
	.align	2
	.word	-1
str_const73:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Term"
	.byte	0	
	.align	2
	.word	-1
str_const72:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"App"
	.byte	0	
	.align	2
	.word	-1
str_const71:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Lambda"
	.byte	0	
	.align	2
	.word	-1
str_const70:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const5
	.ascii	"Variable"
	.byte	0	
	.align	2
	.word	-1
str_const69:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Expr"
	.byte	0	
	.align	2
	.word	-1
str_const68:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"LambdaListRef"
	.byte	0	
	.align	2
	.word	-1
str_const67:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"LambdaListNE"
	.byte	0	
	.align	2
	.word	-1
str_const66:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"LambdaList"
	.byte	0	
	.align	2
	.word	-1
str_const65:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"VarListNE"
	.byte	0	
	.align	2
	.word	-1
str_const64:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"VarList"
	.byte	0	
	.align	2
	.word	-1
str_const63:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"String"
	.byte	0	
	.align	2
	.word	-1
str_const62:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	"Bool"
	.byte	0	
	.align	2
	.word	-1
str_const61:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"Int"
	.byte	0	
	.align	2
	.word	-1
str_const60:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"IO"
	.byte	0	
	.align	2
	.word	-1
str_const59:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"Object"
	.byte	0	
	.align	2
	.word	-1
str_const58:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const8
	.ascii	"_prim_slot"
	.byte	0	
	.align	2
	.word	-1
str_const57:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"SELF_TYPE"
	.byte	0	
	.align	2
	.word	-1
str_const56:
	.word	12
	.word	7
	.word	String_dispTab
	.word	int_const9
	.ascii	"_no_class"
	.byte	0	
	.align	2
	.word	-1
str_const55:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"<basic class>"
	.byte	0	
	.align	2
	.word	-1
str_const54:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"\n};\n};\n"
	.byte	0	
	.align	2
	.word	-1
str_const53:
	.word	12
	.word	11
	.word	String_dispTab
	.word	int_const12
	.ascii	"  main() : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const52:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Main {\n"
	.byte	0	
	.align	2
	.word	-1
str_const51:
	.word	12
	.word	17
	.word	String_dispTab
	.word	int_const13
	.ascii	"(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
	.byte	0	
	.align	2
	.word	-1
str_const50:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"\n------------------cut here------------------\n"
	.byte	0	
	.align	2
	.word	-1
str_const49:
	.word	12
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"Generating code for "
	.byte	0	
	.align	2
	.word	-1
str_const48:
	.word	12
	.word	20
	.word	String_dispTab
	.word	int_const16
	.ascii	"  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const47:
	.word	12
	.word	19
	.word	String_dispTab
	.word	int_const17
	.ascii	"  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
	.byte	0	
	.align	2
	.word	-1
str_const46:
	.word	12
	.word	12
	.word	String_dispTab
	.word	int_const18
	.ascii	"  get_x() : EvalObject { x };\n"
	.byte	0	
	.align	2
	.word	-1
str_const45:
	.word	12
	.word	14
	.word	String_dispTab
	.word	int_const19
	.ascii	"  get_parent() : Closure { parent };\n"
	.byte	0	
	.align	2
	.word	-1
str_const44:
	.word	12
	.word	9
	.word	String_dispTab
	.word	int_const20
	.ascii	"  x : EvalObject;\n"
	.byte	0	
	.align	2
	.word	-1
str_const43:
	.word	12
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	"  parent : Closure;\n"
	.byte	0	
	.align	2
	.word	-1
str_const42:
	.word	12
	.word	14
	.word	String_dispTab
	.word	int_const21
	.ascii	"class Closure inherits EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const41:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const14
	.ascii	"  eval() : EvalObject { { abort(); self; } };\n"
	.byte	0	
	.align	2
	.word	-1
str_const40:
	.word	12
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"class EvalObject inherits IO {\n"
	.byte	0	
	.align	2
	.word	-1
str_const39:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" =>\n"
	.byte	0	
	.align	2
	.word	-1
str_const38:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"beta-reduce: "
	.byte	0	
	.align	2
	.word	-1
str_const37:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"z"
	.byte	0	
	.align	2
	.word	-1
str_const36:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"y"
	.byte	0	
	.align	2
	.word	-1
str_const35:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"x"
	.byte	0	
	.align	2
	.word	-1
str_const34:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"  esac)"
	.byte	0	
	.align	2
	.word	-1
str_const33:
	.word	12
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"    o : Object => { abort(); new EvalObject; };\n"
	.byte	0	
	.align	2
	.word	-1
str_const32:
	.word	12
	.word	12
	.word	String_dispTab
	.word	int_const22
	.ascii	"    c : Closure => c.apply(y);\n"
	.byte	0	
	.align	2
	.word	-1
str_const31:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const7
	.ascii	"  case x of\n"
	.byte	0	
	.align	2
	.word	-1
str_const30:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const2
	.ascii	" in\n"
	.byte	0	
	.align	2
	.word	-1
str_const29:
	.word	12
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"     y : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const28:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	",\n"
	.byte	0	
	.align	2
	.word	-1
str_const27:
	.word	12
	.word	10
	.word	String_dispTab
	.word	int_const24
	.ascii	"(let x : EvalObject <- "
	.byte	0	
	.align	2
	.word	-1
str_const26:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"))"
	.byte	0	
	.align	2
	.word	-1
str_const25:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	")@("
	.byte	0	
	.align	2
	.word	-1
str_const24:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const11
	.ascii	"(("
	.byte	0	
	.align	2
	.word	-1
str_const23:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const3
	.ascii	"};\n"
	.byte	0	
	.align	2
	.word	-1
str_const22:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const25
	.ascii	";}};\n"
	.byte	0	
	.align	2
	.word	-1
str_const21:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const26
	.ascii	"      x <- y;\n"
	.byte	0	
	.align	2
	.word	-1
str_const20:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const4
	.byte	92
	.ascii	"n\");\n"
	.byte	0	
	.align	2
	.word	-1
str_const19:
	.word	12
	.word	13
	.word	String_dispTab
	.word	int_const27
	.ascii	"    { out_string(\"Applying closure "
	.byte	0	
	.align	2
	.word	-1
str_const18:
	.word	12
	.word	14
	.word	String_dispTab
	.word	int_const28
	.ascii	"  apply(y : EvalObject) : EvalObject {\n"
	.byte	0	
	.align	2
	.word	-1
str_const17:
	.word	12
	.word	10
	.word	String_dispTab
	.word	int_const15
	.ascii	" inherits Closure {\n"
	.byte	0	
	.align	2
	.word	-1
str_const16:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"class Closure"
	.byte	0	
	.align	2
	.word	-1
str_const15:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const4
	.ascii	"self))"
	.byte	0	
	.align	2
	.word	-1
str_const14:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"new Closure))"
	.byte	0	
	.align	2
	.word	-1
str_const13:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	").init("
	.byte	0	
	.align	2
	.word	-1
str_const12:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"((new Closure"
	.byte	0	
	.align	2
	.word	-1
str_const11:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"."
	.byte	0	
	.align	2
	.word	-1
str_const10:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.byte	92
	.byte	0	
	.align	2
	.word	-1
str_const9:
	.word	12
	.word	6
	.word	String_dispTab
	.word	int_const10
	.ascii	"get_x()"
	.byte	0	
	.align	2
	.word	-1
str_const8:
	.word	12
	.word	11
	.word	String_dispTab
	.word	int_const29
	.ascii	"Error:  free occurrence of "
	.byte	0	
	.align	2
	.word	-1
str_const7:
	.word	12
	.word	8
	.word	String_dispTab
	.word	int_const6
	.ascii	"get_parent()."
	.byte	0	
	.align	2
	.word	-1
str_const6:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const30
	.ascii	"\nError: Expr is pure virtual; can't gen_code\n"
	.byte	0	
	.align	2
	.word	-1
str_const5:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't substitute\n"
	.byte	0	
	.align	2
	.word	-1
str_const4:
	.word	12
	.word	17
	.word	String_dispTab
	.word	int_const23
	.ascii	"\nError: Expr is pure virtual; can't beta-reduce\n"
	.byte	0	
	.align	2
	.word	-1
str_const3:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"\nError: Expr is pure virtual; can't print self\n"
	.byte	0	
	.align	2
	.word	-1
str_const2:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	" "
	.byte	0	
	.align	2
	.word	-1
str_const1:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const0
	.ascii	"\n"
	.byte	0	
	.align	2
	.word	-1
str_const0:
	.word	12
	.word	16
	.word	String_dispTab
	.word	int_const31
	.ascii	"../../../../admin/tests/past/fa05/PA5/lam-gc.cl"
	.byte	0	
	.align	2
	.word	-1
int_const31:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	47
	.word	-1
int_const30:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	45
	.word	-1
int_const29:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	27
	.word	-1
int_const28:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	39
	.word	-1
int_const27:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	35
	.word	-1
int_const26:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	14
	.word	-1
int_const25:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	5
	.word	-1
int_const24:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	23
	.word	-1
int_const23:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	48
	.word	-1
int_const22:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	31
	.word	-1
int_const21:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	36
	.word	-1
int_const20:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	18
	.word	-1
int_const19:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	37
	.word	-1
int_const18:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	30
	.word	-1
int_const17:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	56
	.word	-1
int_const16:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	61
	.word	-1
int_const15:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	20
	.word	-1
int_const14:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	46
	.word	-1
int_const13:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	50
	.word	-1
int_const12:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	24
	.word	-1
int_const11:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	2
	.word	-1
int_const10:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	7
	.word	-1
int_const9:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	9
	.word	-1
int_const8:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	10
	.word	-1
int_const7:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	12
	.word	-1
int_const6:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	13
	.word	-1
int_const5:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	8
	.word	-1
int_const4:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	6
	.word	-1
int_const3:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	3
	.word	-1
int_const2:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	4
	.word	-1
int_const1:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
int_const0:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	1
	.word	-1
bool_const0:
	.word	11
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
bool_const1:
	.word	11
	.word	4
	.word	Bool_dispTab
	.word	1
class_nameTab:
	.word	str_const59
	.word	str_const60
	.word	str_const64
	.word	str_const65
	.word	str_const69
	.word	str_const70
	.word	str_const71
	.word	str_const72
	.word	str_const73
	.word	str_const74
	.word	str_const61
	.word	str_const62
	.word	str_const63
	.word	str_const66
	.word	str_const67
	.word	str_const68
class_objTab:
	.word	Object_protObj
	.word	Object_init
	.word	IO_protObj
	.word	IO_init
	.word	VarList_protObj
	.word	VarList_init
	.word	VarListNE_protObj
	.word	VarListNE_init
	.word	Expr_protObj
	.word	Expr_init
	.word	Variable_protObj
	.word	Variable_init
	.word	Lambda_protObj
	.word	Lambda_init
	.word	App_protObj
	.word	App_init
	.word	Term_protObj
	.word	Term_init
	.word	Main_protObj
	.word	Main_init
	.word	Int_protObj
	.word	Int_init
	.word	Bool_protObj
	.word	Bool_init
	.word	String_protObj
	.word	String_init
	.word	LambdaList_protObj
	.word	LambdaList_init
	.word	LambdaListNE_protObj
	.word	LambdaListNE_init
	.word	LambdaListRef_protObj
	.word	LambdaListRef_init
Object_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
VarList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarList.isNil
	.word	VarList.head
	.word	VarList.tail
	.word	VarList.add
	.word	VarList.print
VarListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	VarListNE.isNil
	.word	VarListNE.head
	.word	VarListNE.tail
	.word	VarList.add
	.word	VarListNE.print
	.word	VarListNE.init
LambdaList_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaList.isNil
	.word	LambdaList.headE
	.word	LambdaList.headC
	.word	LambdaList.headN
	.word	LambdaList.tail
	.word	LambdaList.add
LambdaListNE_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListNE.isNil
	.word	LambdaListNE.headE
	.word	LambdaListNE.headC
	.word	LambdaListNE.headN
	.word	LambdaListNE.tail
	.word	LambdaList.add
	.word	LambdaListNE.init
LambdaListRef_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	LambdaListRef.isNil
	.word	LambdaListRef.headE
	.word	LambdaListRef.headC
	.word	LambdaListRef.headN
	.word	LambdaListRef.reset
	.word	LambdaListRef.add
	.word	LambdaListRef.removeHead
Expr_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Expr.print_self
	.word	Expr.beta
	.word	Expr.substitute
	.word	Expr.gen_code
Variable_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Variable.print_self
	.word	Variable.beta
	.word	Variable.substitute
	.word	Variable.gen_code
	.word	Variable.init
Lambda_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Lambda.print_self
	.word	Lambda.beta
	.word	Lambda.substitute
	.word	Lambda.gen_code
	.word	Lambda.init
	.word	Lambda.apply
	.word	Lambda.gen_closure_code
App_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	App.print_self
	.word	App.beta
	.word	App.substitute
	.word	App.gen_code
	.word	App.init
Term_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
Main_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	Term.var
	.word	Term.lam
	.word	Term.app
	.word	Term.i
	.word	Term.k
	.word	Term.s
	.word	Main.beta_reduce
	.word	Main.eval_class
	.word	Main.closure_class
	.word	Main.gen_code
	.word	Main.main
String_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	String.length
	.word	String.concat
	.word	String.substr
Bool_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
Int_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
IO_dispTab:
	.word	Object.abort
	.word	Object.type_name
	.word	Object.copy
	.word	IO.out_string
	.word	IO.out_int
	.word	IO.in_string
	.word	IO.in_int
	.word	-1
Main_protObj:
	.word	9
	.word	3
	.word	Main_dispTab
	.word	-1
Term_protObj:
	.word	8
	.word	3
	.word	Term_dispTab
	.word	-1
App_protObj:
	.word	7
	.word	5
	.word	App_dispTab
	.word	0
	.word	0
	.word	-1
Lambda_protObj:
	.word	6
	.word	5
	.word	Lambda_dispTab
	.word	0
	.word	0
	.word	-1
Variable_protObj:
	.word	5
	.word	4
	.word	Variable_dispTab
	.word	str_const75
	.word	-1
Expr_protObj:
	.word	4
	.word	3
	.word	Expr_dispTab
	.word	-1
LambdaListRef_protObj:
	.word	15
	.word	5
	.word	LambdaListRef_dispTab
	.word	int_const1
	.word	0
	.word	-1
LambdaListNE_protObj:
	.word	14
	.word	7
	.word	LambdaListNE_dispTab
	.word	0
	.word	int_const1
	.word	0
	.word	0
	.word	-1
LambdaList_protObj:
	.word	13
	.word	3
	.word	LambdaList_dispTab
	.word	-1
VarListNE_protObj:
	.word	3
	.word	5
	.word	VarListNE_dispTab
	.word	0
	.word	0
	.word	-1
VarList_protObj:
	.word	2
	.word	3
	.word	VarList_dispTab
	.word	-1
String_protObj:
	.word	12
	.word	5
	.word	String_dispTab
	.word	int_const1
	.word	0
	.word	-1
Bool_protObj:
	.word	11
	.word	4
	.word	Bool_dispTab
	.word	0
	.word	-1
Int_protObj:
	.word	10
	.word	4
	.word	Int_dispTab
	.word	0
	.word	-1
IO_protObj:
	.word	1
	.word	3
	.word	IO_dispTab
	.word	-1
Object_protObj:
	.word	0
	.word	3
	.word	Object_dispTab
	.globl	heap_start
heap_start:
	.word	0
	.text
	.globl	Main_init
	.globl	Int_init
	.globl	String_init
	.globl	Bool_init
	.globl	Main.main
Object_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
VarList_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	IO_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
VarListNE_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	VarList_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
LambdaList_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
LambdaListNE_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	LambdaList_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
LambdaListRef_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	la	$a0 int_const1
	sw	$a0 12($s0) # Doing initial value assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Expr_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	IO_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Variable_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Expr_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Lambda_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Expr_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
App_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Expr_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Term_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	IO_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Main_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Term_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
String_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Bool_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
Int_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
IO_init:
	addiu	$sp $sp -12 # Move sp down to store fp s0 and ra
	sw	$fp 12($sp) # Putting fp to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack during initializing object
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # Moving fp to point to right location in sp
	move	$s0 $a0
	jal	Object_init
	move	$a0 $s0
	lw	$fp 12($sp) # Restoring fp from stack when class ends
	lw	$s0 8($sp) # Restoring s0 from stack when class ends
	lw	$ra 4($sp) # Restoring ra from stack when class ends
	addiu	$sp $sp 12 # At end of class
	jr	$ra	 # At end of class
VarList.isNil:
	addiu	$sp $sp -12 # At top of function isNil. From class VarList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 bool_const1
	lw	$fp 12($sp) # Code at end of function isNil. From class VarList
	lw	$s0 8($sp) # Code at end of function isNil. From class VarList
	lw	$ra 4($sp) # Code at end of function isNil. From class VarList
	addiu	$sp $sp 12 # Code at end of function isNil. From class VarList
	jr	$ra	 # Code at end of function isNil. From class VarList
VarList.head:
	addiu	$sp $sp -12 # At top of function head. From class VarList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label0 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 23
	jal	_dispatch_abort
label0:# In dispatch_class. Marker to call the function abort Line number 23
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 Variable_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	Variable_init
	lw	$fp 12($sp) # Code at end of function head. From class VarList
	lw	$s0 8($sp) # Code at end of function head. From class VarList
	lw	$ra 4($sp) # Code at end of function head. From class VarList
	addiu	$sp $sp 12 # Code at end of function head. From class VarList
	jr	$ra	 # Code at end of function head. From class VarList
VarList.tail:
	addiu	$sp $sp -12 # At top of function tail. From class VarList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label1 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 24
	jal	_dispatch_abort
label1:# In dispatch_class. Marker to call the function abort Line number 24
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 VarList_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	VarList_init
	lw	$fp 12($sp) # Code at end of function tail. From class VarList
	lw	$s0 8($sp) # Code at end of function tail. From class VarList
	lw	$ra 4($sp) # Code at end of function tail. From class VarList
	addiu	$sp $sp 12 # Code at end of function tail. From class VarList
	jr	$ra	 # Code at end of function tail. From class VarList
VarList.add:
	addiu	$sp $sp -12 # At top of function add. From class VarList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($fp) # Inside object_class. Found position of temporary x from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 VarListNE_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	VarListNE_init
	bne	$a0 $zero label2 # The type is VarListNE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 25
	jal	_dispatch_abort
label2:# In dispatch_class. Marker to call the function init Line number 25
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 48($t1) # This is position of method init
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function add. From class VarList
	lw	$s0 8($sp) # Code at end of function add. From class VarList
	lw	$ra 4($sp) # Code at end of function add. From class VarList
	addiu	$sp $sp 16 # Code at end of function add. From class VarList
	jr	$ra	 # Code at end of function add. From class VarList
VarList.print:
	addiu	$sp $sp -12 # At top of function print. From class VarList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label3 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 26
	jal	_dispatch_abort
label3:# In dispatch_class. Marker to call the function out_string Line number 26
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function print. From class VarList
	lw	$s0 8($sp) # Code at end of function print. From class VarList
	lw	$ra 4($sp) # Code at end of function print. From class VarList
	addiu	$sp $sp 12 # Code at end of function print. From class VarList
	jr	$ra	 # Code at end of function print. From class VarList
VarListNE.isNil:
	addiu	$sp $sp -12 # At top of function isNil. From class VarListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 bool_const0
	lw	$fp 12($sp) # Code at end of function isNil. From class VarListNE
	lw	$s0 8($sp) # Code at end of function isNil. From class VarListNE
	lw	$ra 4($sp) # Code at end of function isNil. From class VarListNE
	addiu	$sp $sp 12 # Code at end of function isNil. From class VarListNE
	jr	$ra	 # Code at end of function isNil. From class VarListNE
VarListNE.head:
	addiu	$sp $sp -12 # At top of function head. From class VarListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function head. From class VarListNE
	lw	$s0 8($sp) # Code at end of function head. From class VarListNE
	lw	$ra 4($sp) # Code at end of function head. From class VarListNE
	addiu	$sp $sp 12 # Code at end of function head. From class VarListNE
	jr	$ra	 # Code at end of function head. From class VarListNE
VarListNE.tail:
	addiu	$sp $sp -12 # At top of function tail. From class VarListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function tail. From class VarListNE
	lw	$s0 8($sp) # Code at end of function tail. From class VarListNE
	lw	$ra 4($sp) # Code at end of function tail. From class VarListNE
	addiu	$sp $sp 12 # Code at end of function tail. From class VarListNE
	jr	$ra	 # Code at end of function tail. From class VarListNE
VarListNE.init:
	addiu	$sp $sp -12 # At top of function init. From class VarListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary y from ObjectScope as 1
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($fp) # Inside object_class. Found position of temporary r from ObjectScope as 0
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function init. From class VarListNE
	lw	$s0 8($sp) # Code at end of function init. From class VarListNE
	lw	$ra 4($sp) # Code at end of function init. From class VarListNE
	addiu	$sp $sp 20 # Code at end of function init. From class VarListNE
	jr	$ra	 # Code at end of function init. From class VarListNE
VarListNE.print:
	addiu	$sp $sp -12 # At top of function print. From class VarListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label4 # The type is Variable.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 36
	jal	_dispatch_abort
label4:# In dispatch_class. Marker to call the function print_self Line number 36
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label5 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 36
	jal	_dispatch_abort
label5:# In dispatch_class. Marker to call the function out_string Line number 36
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label6 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 37
	jal	_dispatch_abort
label6:# In dispatch_class. Marker to call the function print Line number 37
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print
	lw	$t1 44($t1) # This is position of method print
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function print. From class VarListNE
	lw	$s0 8($sp) # Code at end of function print. From class VarListNE
	lw	$ra 4($sp) # Code at end of function print. From class VarListNE
	addiu	$sp $sp 12 # Code at end of function print. From class VarListNE
	jr	$ra	 # Code at end of function print. From class VarListNE
LambdaList.isNil:
	addiu	$sp $sp -12 # At top of function isNil. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 bool_const1
	lw	$fp 12($sp) # Code at end of function isNil. From class LambdaList
	lw	$s0 8($sp) # Code at end of function isNil. From class LambdaList
	lw	$ra 4($sp) # Code at end of function isNil. From class LambdaList
	addiu	$sp $sp 12 # Code at end of function isNil. From class LambdaList
	jr	$ra	 # Code at end of function isNil. From class LambdaList
LambdaList.headE:
	addiu	$sp $sp -12 # At top of function headE. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label7 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 46
	jal	_dispatch_abort
label7:# In dispatch_class. Marker to call the function abort Line number 46
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 VarList_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	VarList_init
	lw	$fp 12($sp) # Code at end of function headE. From class LambdaList
	lw	$s0 8($sp) # Code at end of function headE. From class LambdaList
	lw	$ra 4($sp) # Code at end of function headE. From class LambdaList
	addiu	$sp $sp 12 # Code at end of function headE. From class LambdaList
	jr	$ra	 # Code at end of function headE. From class LambdaList
LambdaList.headC:
	addiu	$sp $sp -12 # At top of function headC. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label8 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 47
	jal	_dispatch_abort
label8:# In dispatch_class. Marker to call the function abort Line number 47
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 Lambda_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	Lambda_init
	lw	$fp 12($sp) # Code at end of function headC. From class LambdaList
	lw	$s0 8($sp) # Code at end of function headC. From class LambdaList
	lw	$ra 4($sp) # Code at end of function headC. From class LambdaList
	addiu	$sp $sp 12 # Code at end of function headC. From class LambdaList
	jr	$ra	 # Code at end of function headC. From class LambdaList
LambdaList.headN:
	addiu	$sp $sp -12 # At top of function headN. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label9 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 48
	jal	_dispatch_abort
label9:# In dispatch_class. Marker to call the function abort Line number 48
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 int_const1
	lw	$fp 12($sp) # Code at end of function headN. From class LambdaList
	lw	$s0 8($sp) # Code at end of function headN. From class LambdaList
	lw	$ra 4($sp) # Code at end of function headN. From class LambdaList
	addiu	$sp $sp 12 # Code at end of function headN. From class LambdaList
	jr	$ra	 # Code at end of function headN. From class LambdaList
LambdaList.tail:
	addiu	$sp $sp -12 # At top of function tail. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label10 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 49
	jal	_dispatch_abort
label10:# In dispatch_class. Marker to call the function abort Line number 49
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	la	$a0 LambdaList_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	LambdaList_init
	lw	$fp 12($sp) # Code at end of function tail. From class LambdaList
	lw	$s0 8($sp) # Code at end of function tail. From class LambdaList
	lw	$ra 4($sp) # Code at end of function tail. From class LambdaList
	addiu	$sp $sp 12 # Code at end of function tail. From class LambdaList
	jr	$ra	 # Code at end of function tail. From class LambdaList
LambdaList.add:
	addiu	$sp $sp -12 # At top of function add. From class LambdaList
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 20($fp) # Inside object_class. Found position of temporary e from ObjectScope as 2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary n from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 LambdaListNE_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	LambdaListNE_init
	bne	$a0 $zero label11 # The type is LambdaListNE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 51
	jal	_dispatch_abort
label11:# In dispatch_class. Marker to call the function init Line number 51
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 36($t1) # This is position of method init
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function add. From class LambdaList
	lw	$s0 8($sp) # Code at end of function add. From class LambdaList
	lw	$ra 4($sp) # Code at end of function add. From class LambdaList
	addiu	$sp $sp 24 # Code at end of function add. From class LambdaList
	jr	$ra	 # Code at end of function add. From class LambdaList
LambdaListNE.isNil:
	addiu	$sp $sp -12 # At top of function isNil. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 bool_const0
	lw	$fp 12($sp) # Code at end of function isNil. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function isNil. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function isNil. From class LambdaListNE
	addiu	$sp $sp 12 # Code at end of function isNil. From class LambdaListNE
	jr	$ra	 # Code at end of function isNil. From class LambdaListNE
LambdaListNE.headE:
	addiu	$sp $sp -12 # At top of function headE. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 20($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function headE. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function headE. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function headE. From class LambdaListNE
	addiu	$sp $sp 12 # Code at end of function headE. From class LambdaListNE
	jr	$ra	 # Code at end of function headE. From class LambdaListNE
LambdaListNE.headC:
	addiu	$sp $sp -12 # At top of function headC. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function headC. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function headC. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function headC. From class LambdaListNE
	addiu	$sp $sp 12 # Code at end of function headC. From class LambdaListNE
	jr	$ra	 # Code at end of function headC. From class LambdaListNE
LambdaListNE.headN:
	addiu	$sp $sp -12 # At top of function headN. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function headN. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function headN. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function headN. From class LambdaListNE
	addiu	$sp $sp 12 # Code at end of function headN. From class LambdaListNE
	jr	$ra	 # Code at end of function headN. From class LambdaListNE
LambdaListNE.tail:
	addiu	$sp $sp -12 # At top of function tail. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 24($s0) # Inside object_class getting position of attribue inside object
	lw	$fp 12($sp) # Code at end of function tail. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function tail. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function tail. From class LambdaListNE
	addiu	$sp $sp 12 # Code at end of function tail. From class LambdaListNE
	jr	$ra	 # Code at end of function tail. From class LambdaListNE
LambdaListNE.init:
	addiu	$sp $sp -12 # At top of function init. From class LambdaListNE
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 24($fp) # Inside object_class. Found position of temporary e from ObjectScope as 3
	sw	$a0 20($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 20($fp) # Inside object_class. Found position of temporary l from ObjectScope as 2
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 16($fp) # Inside object_class. Found position of temporary n from ObjectScope as 1
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($fp) # Inside object_class. Found position of temporary r from ObjectScope as 0
	sw	$a0 24($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function init. From class LambdaListNE
	lw	$s0 8($sp) # Code at end of function init. From class LambdaListNE
	lw	$ra 4($sp) # Code at end of function init. From class LambdaListNE
	addiu	$sp $sp 28 # Code at end of function init. From class LambdaListNE
	jr	$ra	 # Code at end of function init. From class LambdaListNE
LambdaListRef.isNil:
	addiu	$sp $sp -12 # At top of function isNil. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label12 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 79
	jal	_dispatch_abort
label12:# In dispatch_class. Marker to call the function isNil Line number 79
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains isNil
	lw	$t1 12($t1) # This is position of method isNil
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function isNil. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function isNil. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function isNil. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function isNil. From class LambdaListRef
	jr	$ra	 # Code at end of function isNil. From class LambdaListRef
LambdaListRef.headE:
	addiu	$sp $sp -12 # At top of function headE. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label13 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 80
	jal	_dispatch_abort
label13:# In dispatch_class. Marker to call the function headE Line number 80
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headE
	lw	$t1 16($t1) # This is position of method headE
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function headE. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function headE. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function headE. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function headE. From class LambdaListRef
	jr	$ra	 # Code at end of function headE. From class LambdaListRef
LambdaListRef.headC:
	addiu	$sp $sp -12 # At top of function headC. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label14 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 81
	jal	_dispatch_abort
label14:# In dispatch_class. Marker to call the function headC Line number 81
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headC
	lw	$t1 20($t1) # This is position of method headC
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function headC. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function headC. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function headC. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function headC. From class LambdaListRef
	jr	$ra	 # Code at end of function headC. From class LambdaListRef
LambdaListRef.headN:
	addiu	$sp $sp -12 # At top of function headN. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label15 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 82
	jal	_dispatch_abort
label15:# In dispatch_class. Marker to call the function headN Line number 82
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headN
	lw	$t1 24($t1) # This is position of method headN
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function headN. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function headN. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function headN. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function headN. From class LambdaListRef
	jr	$ra	 # Code at end of function headN. From class LambdaListRef
LambdaListRef.reset:
	addiu	$sp $sp -12 # At top of function reset. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 int_const1
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	la	$a0 LambdaList_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	LambdaList_init
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function reset. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function reset. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function reset. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function reset. From class LambdaListRef
	jr	$ra	 # Code at end of function reset. From class LambdaListRef
LambdaListRef.add:
	addiu	$sp $sp -12 # At top of function add. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary c from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label16 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 92
	jal	_dispatch_abort
label16:# In dispatch_class. Marker to call the function add Line number 92
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains add
	lw	$t1 32($t1) # This is position of method add
	jalr		$t1
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In plus_class Pushing accumalator ontop of stack.
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 int_const0
	jal	Object.copy
	lw	$t2 12($a0) # Fetching int value from inside int object
	lw	$t1 4($sp) # from stack which is in memory get value of first expression to register t1
	addiu	$sp $sp 4 # descrement stack pointer to maintain invariant
	lw	$t3 12($t1) # Fetching int value from inside int object
	add	$t1 $t2 $t3
	sw	$t1 12($a0) # Storing int
# The garbage collector has been turned on by -g so notifying
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In sub_class Pushing accumalator ontop of stack.
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 int_const0
	jal	Object.copy
	lw	$t2 12($a0) # Fetching int value from inside int object
	lw	$t1 4($sp) # Inside sub_class getting first value from stack
	addiu	$sp $sp 4 # Move sp back up to maintain invariant
	lw	$t3 12($t1) # Fetching int value from inside int object
	sub	$t1 $t3 $t2
	sw	$t1 12($a0) # Storing int
# The garbage collector has been turned on by -g so notifying
	lw	$fp 12($sp) # Code at end of function add. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function add. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function add. From class LambdaListRef
	addiu	$sp $sp 20 # Code at end of function add. From class LambdaListRef
	jr	$ra	 # Code at end of function add. From class LambdaListRef
LambdaListRef.removeHead:
	addiu	$sp $sp -12 # At top of function removeHead. From class LambdaListRef
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label17 # The type is LambdaList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 99
	jal	_dispatch_abort
label17:# In dispatch_class. Marker to call the function tail Line number 99
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains tail
	lw	$t1 28($t1) # This is position of method tail
	jalr		$t1
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function removeHead. From class LambdaListRef
	lw	$s0 8($sp) # Code at end of function removeHead. From class LambdaListRef
	lw	$ra 4($sp) # Code at end of function removeHead. From class LambdaListRef
	addiu	$sp $sp 12 # Code at end of function removeHead. From class LambdaListRef
	jr	$ra	 # Code at end of function removeHead. From class LambdaListRef
Expr.print_self:
	addiu	$sp $sp -12 # At top of function print_self. From class Expr
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const3
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label18 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 116
	jal	_dispatch_abort
label18:# In dispatch_class. Marker to call the function out_string Line number 116
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label19 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 117
	jal	_dispatch_abort
label19:# In dispatch_class. Marker to call the function abort Line number 117
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function print_self. From class Expr
	lw	$s0 8($sp) # Code at end of function print_self. From class Expr
	lw	$ra 4($sp) # Code at end of function print_self. From class Expr
	addiu	$sp $sp 12 # Code at end of function print_self. From class Expr
	jr	$ra	 # Code at end of function print_self. From class Expr
Expr.beta:
	addiu	$sp $sp -12 # At top of function beta. From class Expr
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const4
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label20 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 125
	jal	_dispatch_abort
label20:# In dispatch_class. Marker to call the function out_string Line number 125
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label21 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 126
	jal	_dispatch_abort
label21:# In dispatch_class. Marker to call the function abort Line number 126
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function beta. From class Expr
	lw	$s0 8($sp) # Code at end of function beta. From class Expr
	lw	$ra 4($sp) # Code at end of function beta. From class Expr
	addiu	$sp $sp 12 # Code at end of function beta. From class Expr
	jr	$ra	 # Code at end of function beta. From class Expr
Expr.substitute:
	addiu	$sp $sp -12 # At top of function substitute. From class Expr
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const5
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label22 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 134
	jal	_dispatch_abort
label22:# In dispatch_class. Marker to call the function out_string Line number 134
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label23 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 135
	jal	_dispatch_abort
label23:# In dispatch_class. Marker to call the function abort Line number 135
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function substitute. From class Expr
	lw	$s0 8($sp) # Code at end of function substitute. From class Expr
	lw	$ra 4($sp) # Code at end of function substitute. From class Expr
	addiu	$sp $sp 20 # Code at end of function substitute. From class Expr
	jr	$ra	 # Code at end of function substitute. From class Expr
Expr.gen_code:
	addiu	$sp $sp -12 # At top of function gen_code. From class Expr
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const6
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label24 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 143
	jal	_dispatch_abort
label24:# In dispatch_class. Marker to call the function out_string Line number 143
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label25 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 144
	jal	_dispatch_abort
label25:# In dispatch_class. Marker to call the function abort Line number 144
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function gen_code. From class Expr
	lw	$s0 8($sp) # Code at end of function gen_code. From class Expr
	lw	$ra 4($sp) # Code at end of function gen_code. From class Expr
	addiu	$sp $sp 20 # Code at end of function gen_code. From class Expr
	jr	$ra	 # Code at end of function gen_code. From class Expr
Variable.init:
	addiu	$sp $sp -12 # At top of function init. From class Variable
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($fp) # Inside object_class. Found position of temporary n from ObjectScope as 0
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function init. From class Variable
	lw	$s0 8($sp) # Code at end of function init. From class Variable
	lw	$ra 4($sp) # Code at end of function init. From class Variable
	addiu	$sp $sp 16 # Code at end of function init. From class Variable
	jr	$ra	 # Code at end of function init. From class Variable
Variable.print_self:
	addiu	$sp $sp -12 # At top of function print_self. From class Variable
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label26 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 164
	jal	_dispatch_abort
label26:# In dispatch_class. Marker to call the function out_string Line number 164
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function print_self. From class Variable
	lw	$s0 8($sp) # Code at end of function print_self. From class Variable
	lw	$ra 4($sp) # Code at end of function print_self. From class Variable
	addiu	$sp $sp 12 # Code at end of function print_self. From class Variable
	jr	$ra	 # Code at end of function print_self. From class Variable
Variable.beta:
	addiu	$sp $sp -12 # At top of function beta. From class Variable
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function beta. From class Variable
	lw	$s0 8($sp) # Code at end of function beta. From class Variable
	lw	$ra 4($sp) # Code at end of function beta. From class Variable
	addiu	$sp $sp 12 # Code at end of function beta. From class Variable
	jr	$ra	 # Code at end of function beta. From class Variable
Variable.substitute:
	addiu	$sp $sp -12 # At top of function substitute. From class Variable
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	addiu	$sp $sp -4 # Pushing the sp down
	sw	$a0 4($sp) # Putting the result of the first expression on the stack
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	move	$t2 $a0
	lw	$t1 4($sp) # Restoring t1 from stack when e2 ends
	addiu	$sp $sp 4 # After restoring t1 pushinh sp up
	la	$a0 bool_const1 # loading true into a0
	beq	$t1 $t2 label29
	la	$a1 bool_const0 # loading false into a1  
	jal	equality_test
label29:# in eq_class if equal then come here.
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label27
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	b	label28
label27:# The begining of else expression
	move	$a0 $s0
label28:# Marks the location of endif
	lw	$fp 12($sp) # Code at end of function substitute. From class Variable
	lw	$s0 8($sp) # Code at end of function substitute. From class Variable
	lw	$ra 4($sp) # Code at end of function substitute. From class Variable
	addiu	$sp $sp 20 # Code at end of function substitute. From class Variable
	jr	$ra	 # Code at end of function substitute. From class Variable
Variable.gen_code:
	addiu	$sp $sp -12 # At top of function gen_code. From class Variable
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
label31:# Marks the point before we call the pred
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cur_env from ObjectScope as -1
	bne	$a0 $zero label35 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 175
	jal	_dispatch_abort
label35:# In dispatch_class. Marker to call the function isNil Line number 175
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains isNil
	lw	$t1 28($t1) # This is position of method isNil
	jalr		$t1
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label33
	la	$a0 bool_const0
	b	label34
label33:# The begining of else expression
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cur_env from ObjectScope as -1
	bne	$a0 $zero label36 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 178
	jal	_dispatch_abort
label36:# In dispatch_class. Marker to call the function head Line number 178
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains head
	lw	$t1 32($t1) # This is position of method head
	jalr		$t1
	addiu	$sp $sp -4 # Pushing the sp down
	sw	$a0 4($sp) # Putting the result of the first expression on the stack
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	move	$t2 $a0
	lw	$t1 4($sp) # Restoring t1 from stack when e2 ends
	addiu	$sp $sp 4 # After restoring t1 pushinh sp up
	la	$a0 bool_const1 # loading true into a0
	beq	$t1 $t2 label37
	la	$a1 bool_const0 # loading false into a1  
	jal	equality_test
label37:# in eq_class if equal then come here.
	lw	$t1 12($a0) # Inside comp class getting first value from stack
	la	$a0 bool_const1 #  loading value true into a0
	beqz	$t1 label38
	la	$a0 bool_const0 # loading value of false into a0
label38:# In comp_class
label34:# Marks the location of endif
	lw	$t1 12($a0) # Getting value inside a0. a0 will have true or false.
	beq	$t1 $zero label32
	la	$a0 str_const7
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label40 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 180
	jal	_dispatch_abort
label40:# In dispatch_class. Marker to call the function out_string Line number 180
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cur_env from ObjectScope as -1
	bne	$a0 $zero label41 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 181
	jal	_dispatch_abort
label41:# In dispatch_class. Marker to call the function tail Line number 181
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains tail
	lw	$t1 36($t1) # This is position of method tail
	jalr		$t1
	sw	$a0 -4($fp) # Inside assign_class. Found position of temporary cur_env from ObjectScope as -1
# The garbage collector has been turned on by -g so notifying
	b	label31
label32:#  marker for the point right after the loop ends
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cur_env from ObjectScope as -1
	bne	$a0 $zero label44 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 184
	jal	_dispatch_abort
label44:# In dispatch_class. Marker to call the function isNil Line number 184
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains isNil
	lw	$t1 28($t1) # This is position of method isNil
	jalr		$t1
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label42
	la	$a0 str_const8
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label45 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 185
	jal	_dispatch_abort
label45:# In dispatch_class. Marker to call the function out_string Line number 185
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label46 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 186
	jal	_dispatch_abort
label46:# In dispatch_class. Marker to call the function print_self Line number 186
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label47 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 187
	jal	_dispatch_abort
label47:# In dispatch_class. Marker to call the function out_string Line number 187
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label48 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 188
	jal	_dispatch_abort
label48:# In dispatch_class. Marker to call the function abort Line number 188
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains abort
	lw	$t1 0($t1) # This is position of method abort
	jalr		$t1
	move	$a0 $s0
	b	label43
label42:# The begining of else expression
	la	$a0 str_const9
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label49 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 192
	jal	_dispatch_abort
label49:# In dispatch_class. Marker to call the function out_string Line number 192
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
label43:# Marks the location of endif
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function gen_code. From class Variable
	lw	$s0 8($sp) # Code at end of function gen_code. From class Variable
	lw	$ra 4($sp) # Code at end of function gen_code. From class Variable
	addiu	$sp $sp 20 # Code at end of function gen_code. From class Variable
	jr	$ra	 # Code at end of function gen_code. From class Variable
Lambda.init:
	addiu	$sp $sp -12 # At top of function init. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary a from ObjectScope as 1
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($fp) # Inside object_class. Found position of temporary b from ObjectScope as 0
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function init. From class Lambda
	lw	$s0 8($sp) # Code at end of function init. From class Lambda
	lw	$ra 4($sp) # Code at end of function init. From class Lambda
	addiu	$sp $sp 20 # Code at end of function init. From class Lambda
	jr	$ra	 # Code at end of function init. From class Lambda
Lambda.print_self:
	addiu	$sp $sp -12 # At top of function print_self. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const10
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label51 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 215
	jal	_dispatch_abort
label51:# In dispatch_class. Marker to call the function out_string Line number 215
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label52 # The type is Variable.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 216
	jal	_dispatch_abort
label52:# In dispatch_class. Marker to call the function print_self Line number 216
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const11
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label53 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 217
	jal	_dispatch_abort
label53:# In dispatch_class. Marker to call the function out_string Line number 217
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label54 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 218
	jal	_dispatch_abort
label54:# In dispatch_class. Marker to call the function print_self Line number 218
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function print_self. From class Lambda
	lw	$s0 8($sp) # Code at end of function print_self. From class Lambda
	lw	$ra 4($sp) # Code at end of function print_self. From class Lambda
	addiu	$sp $sp 12 # Code at end of function print_self. From class Lambda
	jr	$ra	 # Code at end of function print_self. From class Lambda
Lambda.beta:
	addiu	$sp $sp -12 # At top of function beta. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function beta. From class Lambda
	lw	$s0 8($sp) # Code at end of function beta. From class Lambda
	lw	$ra 4($sp) # Code at end of function beta. From class Lambda
	addiu	$sp $sp 12 # Code at end of function beta. From class Lambda
	jr	$ra	 # Code at end of function beta. From class Lambda
Lambda.apply:
	addiu	$sp $sp -12 # At top of function apply. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary actual from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label55 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 226
	jal	_dispatch_abort
label55:# In dispatch_class. Marker to call the function substitute Line number 226
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains substitute
	lw	$t1 36($t1) # This is position of method substitute
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function apply. From class Lambda
	lw	$s0 8($sp) # Code at end of function apply. From class Lambda
	lw	$ra 4($sp) # Code at end of function apply. From class Lambda
	addiu	$sp $sp 16 # Code at end of function apply. From class Lambda
	jr	$ra	 # Code at end of function apply. From class Lambda
Lambda.substitute:
	addiu	$sp $sp -12 # At top of function substitute. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	addiu	$sp $sp -4 # Pushing the sp down
	sw	$a0 4($sp) # Putting the result of the first expression on the stack
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	move	$t2 $a0
	lw	$t1 4($sp) # Restoring t1 from stack when e2 ends
	addiu	$sp $sp 4 # After restoring t1 pushinh sp up
	la	$a0 bool_const1 # loading true into a0
	beq	$t1 $t2 label58
	la	$a1 bool_const0 # loading false into a1  
	jal	equality_test
label58:# in eq_class if equal then come here.
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label56
	move	$a0 $s0
	b	label57
label56:# The begining of else expression
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label59 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 234
	jal	_dispatch_abort
label59:# In dispatch_class. Marker to call the function substitute Line number 234
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains substitute
	lw	$t1 36($t1) # This is position of method substitute
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 Lambda_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	Lambda_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary new_body from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary new_lam from ObjectScope as -2
	bne	$a0 $zero label60 # The type is Lambda.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 236
	jal	_dispatch_abort
label60:# In dispatch_class. Marker to call the function init Line number 236
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
label57:# Marks the location of endif
	lw	$fp 12($sp) # Code at end of function substitute. From class Lambda
	lw	$s0 8($sp) # Code at end of function substitute. From class Lambda
	lw	$ra 4($sp) # Code at end of function substitute. From class Lambda
	addiu	$sp $sp 20 # Code at end of function substitute. From class Lambda
	jr	$ra	 # Code at end of function substitute. From class Lambda
Lambda.gen_code:
	addiu	$sp $sp -12 # At top of function gen_code. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const12
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label62 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 242
	jal	_dispatch_abort
label62:# In dispatch_class. Marker to call the function out_string Line number 242
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary closures from ObjectScope as 0
	bne	$a0 $zero label63 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 243
	jal	_dispatch_abort
label63:# In dispatch_class. Marker to call the function add Line number 243
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains add
	lw	$t1 32($t1) # This is position of method add
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_int. Compiler does: Pushes parameter of function out_int onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label64 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 243
	jal	_dispatch_abort
label64:# In dispatch_class. Marker to call the function out_int Line number 243
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_int
	lw	$t1 16($t1) # This is position of method out_int
	jalr		$t1
	la	$a0 str_const13
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label65 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 244
	jal	_dispatch_abort
label65:# In dispatch_class. Marker to call the function out_string Line number 244
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	bne	$a0 $zero label68 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 245
	jal	_dispatch_abort
label68:# In dispatch_class. Marker to call the function isNil Line number 245
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains isNil
	lw	$t1 28($t1) # This is position of method isNil
	jalr		$t1
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label66
	la	$a0 str_const14
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label69 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 246
	jal	_dispatch_abort
label69:# In dispatch_class. Marker to call the function out_string Line number 246
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	b	label67
label66:# The begining of else expression
	la	$a0 str_const15
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label70 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 248
	jal	_dispatch_abort
label70:# In dispatch_class. Marker to call the function out_string Line number 248
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
label67:# Marks the location of endif
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function gen_code. From class Lambda
	lw	$s0 8($sp) # Code at end of function gen_code. From class Lambda
	lw	$ra 4($sp) # Code at end of function gen_code. From class Lambda
	addiu	$sp $sp 20 # Code at end of function gen_code. From class Lambda
	jr	$ra	 # Code at end of function gen_code. From class Lambda
Lambda.gen_closure_code:
	addiu	$sp $sp -12 # At top of function gen_closure_code. From class Lambda
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const16
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label72 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 256
	jal	_dispatch_abort
label72:# In dispatch_class. Marker to call the function out_string Line number 256
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 20($fp) # Inside object_class. Found position of temporary n from ObjectScope as 2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_int. Compiler does: Pushes parameter of function out_int onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label73 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 257
	jal	_dispatch_abort
label73:# In dispatch_class. Marker to call the function out_int Line number 257
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_int
	lw	$t1 16($t1) # This is position of method out_int
	jalr		$t1
	la	$a0 str_const17
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label74 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 258
	jal	_dispatch_abort
label74:# In dispatch_class. Marker to call the function out_string Line number 258
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const18
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label75 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 259
	jal	_dispatch_abort
label75:# In dispatch_class. Marker to call the function out_string Line number 259
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const19
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label76 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 260
	jal	_dispatch_abort
label76:# In dispatch_class. Marker to call the function out_string Line number 260
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 20($fp) # Inside object_class. Found position of temporary n from ObjectScope as 2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_int. Compiler does: Pushes parameter of function out_int onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label77 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 261
	jal	_dispatch_abort
label77:# In dispatch_class. Marker to call the function out_int Line number 261
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_int
	lw	$t1 16($t1) # This is position of method out_int
	jalr		$t1
	la	$a0 str_const20
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label78 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 262
	jal	_dispatch_abort
label78:# In dispatch_class. Marker to call the function out_string Line number 262
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const21
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label79 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 263
	jal	_dispatch_abort
label79:# In dispatch_class. Marker to call the function out_string Line number 263
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call add. Compiler does: Pushes parameter of function add onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	bne	$a0 $zero label80 # The type is VarList.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 264
	jal	_dispatch_abort
label80:# In dispatch_class. Marker to call the function add Line number 264
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains add
	lw	$t1 40($t1) # This is position of method add
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary closures from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label81 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 264
	jal	_dispatch_abort
label81:# In dispatch_class. Marker to call the function gen_code Line number 264
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 40($t1) # This is position of method gen_code
	jalr		$t1
	la	$a0 str_const22
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label82 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 265
	jal	_dispatch_abort
label82:# In dispatch_class. Marker to call the function out_string Line number 265
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const23
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label83 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 266
	jal	_dispatch_abort
label83:# In dispatch_class. Marker to call the function out_string Line number 266
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function gen_closure_code. From class Lambda
	lw	$s0 8($sp) # Code at end of function gen_closure_code. From class Lambda
	lw	$ra 4($sp) # Code at end of function gen_closure_code. From class Lambda
	addiu	$sp $sp 24 # Code at end of function gen_closure_code. From class Lambda
	jr	$ra	 # Code at end of function gen_closure_code. From class Lambda
App.init:
	addiu	$sp $sp -12 # At top of function init. From class App
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary f from ObjectScope as 1
	sw	$a0 12($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($fp) # Inside object_class. Found position of temporary a from ObjectScope as 0
	sw	$a0 16($s0) # Doing assign
# The garbage collector has been turned on by -g so notifying
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function init. From class App
	lw	$s0 8($sp) # Code at end of function init. From class App
	lw	$ra 4($sp) # Code at end of function init. From class App
	addiu	$sp $sp 20 # Code at end of function init. From class App
	jr	$ra	 # Code at end of function init. From class App
App.print_self:
	addiu	$sp $sp -12 # At top of function print_self. From class App
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const24
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label84 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 288
	jal	_dispatch_abort
label84:# In dispatch_class. Marker to call the function out_string Line number 288
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label85 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 289
	jal	_dispatch_abort
label85:# In dispatch_class. Marker to call the function print_self Line number 289
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const25
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label86 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 290
	jal	_dispatch_abort
label86:# In dispatch_class. Marker to call the function out_string Line number 290
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label87 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 291
	jal	_dispatch_abort
label87:# In dispatch_class. Marker to call the function print_self Line number 291
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const26
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label88 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 292
	jal	_dispatch_abort
label88:# In dispatch_class. Marker to call the function out_string Line number 292
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	lw	$fp 12($sp) # Code at end of function print_self. From class App
	lw	$s0 8($sp) # Code at end of function print_self. From class App
	lw	$ra 4($sp) # Code at end of function print_self. From class App
	addiu	$sp $sp 12 # Code at end of function print_self. From class App
	jr	$ra	 # Code at end of function print_self. From class App
App.beta:
	addiu	$sp $sp -12 # At top of function beta. From class App
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label90 # if expr0 evaluates to void a run time error is produced.
	la	$a0 str_const0
	li	$t1 304
	jal	_case_abort2
label90:# Marker for the branch number 0 of type Lambda. Having id 6
	lw	$t2 0($a0) # Getting type of expression from 0th offset inside a0
	blt	$t2 6 label91
	bgt	$t2 6 label91
	sw	$a0 0($sp) # Inside branch_class putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call apply. Compiler does: Pushes parameter of function apply onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary l from ObjectScope as -1
	bne	$a0 $zero label93 # The type is Lambda.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 299
	jal	_dispatch_abort
label93:# In dispatch_class. Marker to call the function apply Line number 299
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains apply
	lw	$t1 48($t1) # This is position of method apply
	jalr		$t1
	addiu	$sp $sp 4 # Since added object to stack now on exiting branch putting sp back to original
	b	label89
label91:# Marker for the branch number 1 of type Expr. Having id 4
	blt	$t2 4 label92
	bgt	$t2 7 label92
	sw	$a0 0($sp) # Inside branch_class putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label94 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 301
	jal	_dispatch_abort
label94:# In dispatch_class. Marker to call the function beta Line number 301
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains beta
	lw	$t1 32($t1) # This is position of method beta
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 App_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	App_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary new_fun from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary new_app from ObjectScope as -3
	bne	$a0 $zero label95 # The type is App.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 303
	jal	_dispatch_abort
label95:# In dispatch_class. Marker to call the function init Line number 303
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added object to stack now on exiting branch putting sp back to original
	b	label89
label92:# Marker for case abort. Called when case has no match. The class name of object in a0 is printed and execution halts
	jal	_case_abort
label89:# Marker for end of case
	lw	$fp 12($sp) # Code at end of function beta. From class App
	lw	$s0 8($sp) # Code at end of function beta. From class App
	lw	$ra 4($sp) # Code at end of function beta. From class App
	addiu	$sp $sp 12 # Code at end of function beta. From class App
	jr	$ra	 # Code at end of function beta. From class App
App.substitute:
	addiu	$sp $sp -12 # At top of function substitute. From class App
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label96 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 308
	jal	_dispatch_abort
label96:# In dispatch_class. Marker to call the function substitute Line number 308
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains substitute
	lw	$t1 36($t1) # This is position of method substitute
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call substitute. Compiler does: Pushes parameter of function substitute onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label97 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 309
	jal	_dispatch_abort
label97:# In dispatch_class. Marker to call the function substitute Line number 309
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains substitute
	lw	$t1 36($t1) # This is position of method substitute
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 App_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	App_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary new_fun from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary new_arg from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary new_app from ObjectScope as -3
	bne	$a0 $zero label98 # The type is App.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 311
	jal	_dispatch_abort
label98:# In dispatch_class. Marker to call the function init Line number 311
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function substitute. From class App
	lw	$s0 8($sp) # Code at end of function substitute. From class App
	lw	$ra 4($sp) # Code at end of function substitute. From class App
	addiu	$sp $sp 20 # Code at end of function substitute. From class App
	jr	$ra	 # Code at end of function substitute. From class App
App.gen_code:
	addiu	$sp $sp -12 # At top of function gen_code. From class App
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const27
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label99 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 316
	jal	_dispatch_abort
label99:# In dispatch_class. Marker to call the function out_string Line number 316
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary closures from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label100 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 317
	jal	_dispatch_abort
label100:# In dispatch_class. Marker to call the function gen_code Line number 317
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 40($t1) # This is position of method gen_code
	jalr		$t1
	la	$a0 str_const28
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label101 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 318
	jal	_dispatch_abort
label101:# In dispatch_class. Marker to call the function out_string Line number 318
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const29
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label102 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 319
	jal	_dispatch_abort
label102:# In dispatch_class. Marker to call the function out_string Line number 319
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 16($fp) # Inside object_class. Found position of temporary env from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary closures from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($s0) # Inside object_class getting position of attribue inside object
	bne	$a0 $zero label103 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 320
	jal	_dispatch_abort
label103:# In dispatch_class. Marker to call the function gen_code Line number 320
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 40($t1) # This is position of method gen_code
	jalr		$t1
	la	$a0 str_const30
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label104 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 321
	jal	_dispatch_abort
label104:# In dispatch_class. Marker to call the function out_string Line number 321
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const31
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label105 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 322
	jal	_dispatch_abort
label105:# In dispatch_class. Marker to call the function out_string Line number 322
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const32
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label106 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 323
	jal	_dispatch_abort
label106:# In dispatch_class. Marker to call the function out_string Line number 323
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const33
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label107 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 324
	jal	_dispatch_abort
label107:# In dispatch_class. Marker to call the function out_string Line number 324
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const34
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label108 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 325
	jal	_dispatch_abort
label108:# In dispatch_class. Marker to call the function out_string Line number 325
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function gen_code. From class App
	lw	$s0 8($sp) # Code at end of function gen_code. From class App
	lw	$ra 4($sp) # Code at end of function gen_code. From class App
	addiu	$sp $sp 20 # Code at end of function gen_code. From class App
	jr	$ra	 # Code at end of function gen_code. From class App
Term.var:
	addiu	$sp $sp -12 # At top of function var. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 Variable_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	Variable_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary x from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary v from ObjectScope as -1
	bne	$a0 $zero label109 # The type is Variable.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 341
	jal	_dispatch_abort
label109:# In dispatch_class. Marker to call the function init Line number 341
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function var. From class Term
	lw	$s0 8($sp) # Code at end of function var. From class Term
	lw	$ra 4($sp) # Code at end of function var. From class Term
	addiu	$sp $sp 16 # Code at end of function var. From class Term
	jr	$ra	 # Code at end of function var. From class Term
Term.lam:
	addiu	$sp $sp -12 # At top of function lam. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 Lambda_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	Lambda_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($fp) # Inside object_class. Found position of temporary x from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary l from ObjectScope as -1
	bne	$a0 $zero label110 # The type is Lambda.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 346
	jal	_dispatch_abort
label110:# In dispatch_class. Marker to call the function init Line number 346
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function lam. From class Term
	lw	$s0 8($sp) # Code at end of function lam. From class Term
	lw	$ra 4($sp) # Code at end of function lam. From class Term
	addiu	$sp $sp 20 # Code at end of function lam. From class Term
	jr	$ra	 # Code at end of function lam. From class Term
Term.app:
	addiu	$sp $sp -12 # At top of function app. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 App_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	App_init
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 16($fp) # Inside object_class. Found position of temporary e1 from ObjectScope as 1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e2 from ObjectScope as 0
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call init. Compiler does: Pushes parameter of function init onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary a from ObjectScope as -1
	bne	$a0 $zero label111 # The type is App.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 351
	jal	_dispatch_abort
label111:# In dispatch_class. Marker to call the function init Line number 351
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains init
	lw	$t1 44($t1) # This is position of method init
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function app. From class Term
	lw	$s0 8($sp) # Code at end of function app. From class Term
	lw	$ra 4($sp) # Code at end of function app. From class Term
	addiu	$sp $sp 20 # Code at end of function app. From class Term
	jr	$ra	 # Code at end of function app. From class Term
Term.i:
	addiu	$sp $sp -12 # At top of function i. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const35
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label112 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 358
	jal	_dispatch_abort
label112:# In dispatch_class. Marker to call the function var Line number 358
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label113 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 359
	jal	_dispatch_abort
label113:# In dispatch_class. Marker to call the function lam Line number 359
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function i. From class Term
	lw	$s0 8($sp) # Code at end of function i. From class Term
	lw	$ra 4($sp) # Code at end of function i. From class Term
	addiu	$sp $sp 12 # Code at end of function i. From class Term
	jr	$ra	 # Code at end of function i. From class Term
Term.k:
	addiu	$sp $sp -12 # At top of function k. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const35
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label114 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 363
	jal	_dispatch_abort
label114:# In dispatch_class. Marker to call the function var Line number 363
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 str_const36
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label115 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 364
	jal	_dispatch_abort
label115:# In dispatch_class. Marker to call the function var Line number 364
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary y from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label116 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 365
	jal	_dispatch_abort
label116:# In dispatch_class. Marker to call the function lam Line number 365
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label117 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 365
	jal	_dispatch_abort
label117:# In dispatch_class. Marker to call the function lam Line number 365
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function k. From class Term
	lw	$s0 8($sp) # Code at end of function k. From class Term
	lw	$ra 4($sp) # Code at end of function k. From class Term
	addiu	$sp $sp 12 # Code at end of function k. From class Term
	jr	$ra	 # Code at end of function k. From class Term
Term.s:
	addiu	$sp $sp -12 # At top of function s. From class Term
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const35
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label118 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 369
	jal	_dispatch_abort
label118:# In dispatch_class. Marker to call the function var Line number 369
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 str_const36
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label119 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 370
	jal	_dispatch_abort
label119:# In dispatch_class. Marker to call the function var Line number 370
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 str_const37
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call var. Compiler does: Pushes parameter of function var onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label120 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 371
	jal	_dispatch_abort
label120:# In dispatch_class. Marker to call the function var Line number 371
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains var
	lw	$t1 28($t1) # This is position of method var
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary y from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary z from ObjectScope as -3
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary x from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary z from ObjectScope as -3
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label121 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label121:# In dispatch_class. Marker to call the function app Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary y from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary z from ObjectScope as -3
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label122 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label122:# In dispatch_class. Marker to call the function app Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label123 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label123:# In dispatch_class. Marker to call the function app Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label124 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label124:# In dispatch_class. Marker to call the function lam Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label125 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label125:# In dispatch_class. Marker to call the function lam Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call lam. Compiler does: Pushes parameter of function lam onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label126 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 372
	jal	_dispatch_abort
label126:# In dispatch_class. Marker to call the function lam Line number 372
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains lam
	lw	$t1 32($t1) # This is position of method lam
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function s. From class Term
	lw	$s0 8($sp) # Code at end of function s. From class Term
	lw	$ra 4($sp) # Code at end of function s. From class Term
	addiu	$sp $sp 12 # Code at end of function s. From class Term
	jr	$ra	 # Code at end of function s. From class Term
Main.beta_reduce:
	addiu	$sp $sp -12 # At top of function beta_reduce. From class Main
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const38
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label127 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 387
	jal	_dispatch_abort
label127:# In dispatch_class. Marker to call the function out_string Line number 387
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	bne	$a0 $zero label128 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 388
	jal	_dispatch_abort
label128:# In dispatch_class. Marker to call the function print_self Line number 388
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 bool_const0
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
label129:# Marks the point before we call the pred
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary done from ObjectScope as -1
	lw	$t1 12($a0) # Inside comp class getting first value from stack
	la	$a0 bool_const1 #  loading value true into a0
	beqz	$t1 label131
	la	$a0 bool_const0 # loading value of false into a0
label131:# In comp_class
	lw	$t1 12($a0) # Getting value inside a0. a0 will have true or false.
	beq	$t1 $zero label130
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	bne	$a0 $zero label132 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 394
	jal	_dispatch_abort
label132:# In dispatch_class. Marker to call the function beta Line number 394
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains beta
	lw	$t1 32($t1) # This is position of method beta
	jalr		$t1
	sw	$a0 -8($fp) # Inside assign_class. Found position of temporary new_expr from ObjectScope as -2
# The garbage collector has been turned on by -g so notifying
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary new_expr from ObjectScope as -2
	addiu	$sp $sp -4 # Pushing the sp down
	sw	$a0 4($sp) # Putting the result of the first expression on the stack
# The garbage collector has been turned on by -g so notifying
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	move	$t2 $a0
	lw	$t1 4($sp) # Restoring t1 from stack when e2 ends
	addiu	$sp $sp 4 # After restoring t1 pushinh sp up
	la	$a0 bool_const1 # loading true into a0
	beq	$t1 $t2 label135
	la	$a1 bool_const0 # loading false into a1  
	jal	equality_test
label135:# in eq_class if equal then come here.
	lw	$t1 12($a0) # Getting value inside a0
	beqz	$t1 label133
	la	$a0 bool_const1
	sw	$a0 -4($fp) # Inside assign_class. Found position of temporary done from ObjectScope as -1
# The garbage collector has been turned on by -g so notifying
	b	label134
label133:# The begining of else expression
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary new_expr from ObjectScope as -2
	sw	$a0 12($fp) # Inside assign_class. Found position of temporary e from ObjectScope as 0
# The garbage collector has been turned on by -g so notifying
	la	$a0 str_const39
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label136 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 400
	jal	_dispatch_abort
label136:# In dispatch_class. Marker to call the function out_string Line number 400
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	bne	$a0 $zero label137 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 401
	jal	_dispatch_abort
label137:# In dispatch_class. Marker to call the function print_self Line number 401
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
label134:# Marks the location of endif
	b	label129
label130:#  marker for the point right after the loop ends
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label139 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 406
	jal	_dispatch_abort
label139:# In dispatch_class. Marker to call the function out_string Line number 406
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function beta_reduce. From class Main
	lw	$s0 8($sp) # Code at end of function beta_reduce. From class Main
	lw	$ra 4($sp) # Code at end of function beta_reduce. From class Main
	addiu	$sp $sp 16 # Code at end of function beta_reduce. From class Main
	jr	$ra	 # Code at end of function beta_reduce. From class Main
Main.eval_class:
	addiu	$sp $sp -12 # At top of function eval_class. From class Main
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const40
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label140 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 414
	jal	_dispatch_abort
label140:# In dispatch_class. Marker to call the function out_string Line number 414
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const41
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label141 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 415
	jal	_dispatch_abort
label141:# In dispatch_class. Marker to call the function out_string Line number 415
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const23
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label142 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 416
	jal	_dispatch_abort
label142:# In dispatch_class. Marker to call the function out_string Line number 416
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function eval_class. From class Main
	lw	$s0 8($sp) # Code at end of function eval_class. From class Main
	lw	$ra 4($sp) # Code at end of function eval_class. From class Main
	addiu	$sp $sp 12 # Code at end of function eval_class. From class Main
	jr	$ra	 # Code at end of function eval_class. From class Main
Main.closure_class:
	addiu	$sp $sp -12 # At top of function closure_class. From class Main
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 str_const42
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label143 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 422
	jal	_dispatch_abort
label143:# In dispatch_class. Marker to call the function out_string Line number 422
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const43
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label144 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 423
	jal	_dispatch_abort
label144:# In dispatch_class. Marker to call the function out_string Line number 423
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const44
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label145 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 424
	jal	_dispatch_abort
label145:# In dispatch_class. Marker to call the function out_string Line number 424
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const45
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label146 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 425
	jal	_dispatch_abort
label146:# In dispatch_class. Marker to call the function out_string Line number 425
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const46
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label147 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 426
	jal	_dispatch_abort
label147:# In dispatch_class. Marker to call the function out_string Line number 426
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const47
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label148 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 427
	jal	_dispatch_abort
label148:# In dispatch_class. Marker to call the function out_string Line number 427
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const48
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label149 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 428
	jal	_dispatch_abort
label149:# In dispatch_class. Marker to call the function out_string Line number 428
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const23
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label150 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 429
	jal	_dispatch_abort
label150:# In dispatch_class. Marker to call the function out_string Line number 429
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$fp 12($sp) # Code at end of function closure_class. From class Main
	lw	$s0 8($sp) # Code at end of function closure_class. From class Main
	lw	$ra 4($sp) # Code at end of function closure_class. From class Main
	addiu	$sp $sp 12 # Code at end of function closure_class. From class Main
	jr	$ra	 # Code at end of function closure_class. From class Main
Main.gen_code:
	addiu	$sp $sp -12 # At top of function gen_code. From class Main
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	la	$a0 LambdaListRef_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	LambdaListRef_init
	bne	$a0 $zero label151 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 434
	jal	_dispatch_abort
label151:# In dispatch_class. Marker to call the function reset Line number 434
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains reset
	lw	$t1 28($t1) # This is position of method reset
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	la	$a0 str_const49
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label152 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 436
	jal	_dispatch_abort
label152:# In dispatch_class. Marker to call the function out_string Line number 436
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	bne	$a0 $zero label153 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 437
	jal	_dispatch_abort
label153:# In dispatch_class. Marker to call the function print_self Line number 437
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const50
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label154 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 438
	jal	_dispatch_abort
label154:# In dispatch_class. Marker to call the function out_string Line number 438
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const51
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label155 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 439
	jal	_dispatch_abort
label155:# In dispatch_class. Marker to call the function out_string Line number 439
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label156 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 440
	jal	_dispatch_abort
label156:# In dispatch_class. Marker to call the function eval_class Line number 440
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains eval_class
	lw	$t1 56($t1) # This is position of method eval_class
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label157 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 441
	jal	_dispatch_abort
label157:# In dispatch_class. Marker to call the function closure_class Line number 441
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains closure_class
	lw	$t1 60($t1) # This is position of method closure_class
	jalr		$t1
	la	$a0 str_const52
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label158 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 442
	jal	_dispatch_abort
label158:# In dispatch_class. Marker to call the function out_string Line number 442
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 str_const53
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label159 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 443
	jal	_dispatch_abort
label159:# In dispatch_class. Marker to call the function out_string Line number 443
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	la	$a0 VarList_protObj # a new object being loaded into a0
	jal	Object.copy
	jal	VarList_init
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 12($fp) # Inside object_class. Found position of temporary e from ObjectScope as 0
	bne	$a0 $zero label160 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 444
	jal	_dispatch_abort
label160:# In dispatch_class. Marker to call the function gen_code Line number 444
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 40($t1) # This is position of method gen_code
	jalr		$t1
	la	$a0 str_const54
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label161 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 445
	jal	_dispatch_abort
label161:# In dispatch_class. Marker to call the function out_string Line number 445
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
label162:# Marks the point before we call the pred
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	bne	$a0 $zero label164 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 446
	jal	_dispatch_abort
label164:# In dispatch_class. Marker to call the function isNil Line number 446
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains isNil
	lw	$t1 12($t1) # This is position of method isNil
	jalr		$t1
	lw	$t1 12($a0) # Inside comp class getting first value from stack
	la	$a0 bool_const1 #  loading value true into a0
	beqz	$t1 label165
	la	$a0 bool_const0 # loading value of false into a0
label165:# In comp_class
	lw	$t1 12($a0) # Getting value inside a0. a0 will have true or false.
	beq	$t1 $zero label163
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	bne	$a0 $zero label166 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 447
	jal	_dispatch_abort
label166:# In dispatch_class. Marker to call the function headE Line number 447
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headE
	lw	$t1 16($t1) # This is position of method headE
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	bne	$a0 $zero label167 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 448
	jal	_dispatch_abort
label167:# In dispatch_class. Marker to call the function headC Line number 448
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headC
	lw	$t1 20($t1) # This is position of method headC
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	bne	$a0 $zero label168 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 449
	jal	_dispatch_abort
label168:# In dispatch_class. Marker to call the function headN Line number 449
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains headN
	lw	$t1 24($t1) # This is position of method headN
	jalr		$t1
	sw	$a0 0($sp) # Inside let statement. Putting identifier on stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	bne	$a0 $zero label169 # The type is LambdaListRef.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 451
	jal	_dispatch_abort
label169:# In dispatch_class. Marker to call the function removeHead Line number 451
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains removeHead
	lw	$t1 36($t1) # This is position of method removeHead
	jalr		$t1
	lw	$a0 -16($fp) # Inside object_class. Found position of temporary n from ObjectScope as -4
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_closure_code. Compiler does: Pushes parameter of function gen_closure_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -8($fp) # Inside object_class. Found position of temporary e from ObjectScope as -2
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_closure_code. Compiler does: Pushes parameter of function gen_closure_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -4($fp) # Inside object_class. Found position of temporary cl from ObjectScope as -1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_closure_code. Compiler does: Pushes parameter of function gen_closure_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	lw	$a0 -12($fp) # Inside object_class. Found position of temporary c from ObjectScope as -3
	bne	$a0 $zero label170 # The type is Lambda.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 452
	jal	_dispatch_abort
label170:# In dispatch_class. Marker to call the function gen_closure_code Line number 452
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_closure_code
	lw	$t1 52($t1) # This is position of method gen_closure_code
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	b	label162
label163:#  marker for the point right after the loop ends
	la	$a0 str_const50
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label171 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 455
	jal	_dispatch_abort
label171:# In dispatch_class. Marker to call the function out_string Line number 455
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	addiu	$sp $sp 4 # Since added a object to stack now on exiting let putting sp back to original
	lw	$fp 12($sp) # Code at end of function gen_code. From class Main
	lw	$s0 8($sp) # Code at end of function gen_code. From class Main
	lw	$ra 4($sp) # Code at end of function gen_code. From class Main
	addiu	$sp $sp 16 # Code at end of function gen_code. From class Main
	jr	$ra	 # Code at end of function gen_code. From class Main
Main.main:
	addiu	$sp $sp -12 # At top of function main. From class Main
	sw	$fp 12($sp) # Putting fp to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$s0 8($sp) # Putting s0 to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	sw	$ra 4($sp) # Putting ra to stack at top of function call
# The garbage collector has been turned on by -g so notifying
	addiu	$fp $sp 4 # The fp now points to right location.
	move	$s0 $a0
	move	$a0 $s0
	bne	$a0 $zero label172 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 461
	jal	_dispatch_abort
label172:# In dispatch_class. Marker to call the function i Line number 461
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	bne	$a0 $zero label173 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 461
	jal	_dispatch_abort
label173:# In dispatch_class. Marker to call the function print_self Line number 461
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label174 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 462
	jal	_dispatch_abort
label174:# In dispatch_class. Marker to call the function out_string Line number 462
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label175 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 463
	jal	_dispatch_abort
label175:# In dispatch_class. Marker to call the function k Line number 463
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	bne	$a0 $zero label176 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 463
	jal	_dispatch_abort
label176:# In dispatch_class. Marker to call the function print_self Line number 463
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label177 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 464
	jal	_dispatch_abort
label177:# In dispatch_class. Marker to call the function out_string Line number 464
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label178 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 465
	jal	_dispatch_abort
label178:# In dispatch_class. Marker to call the function s Line number 465
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	bne	$a0 $zero label179 # The type is Expr.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 465
	jal	_dispatch_abort
label179:# In dispatch_class. Marker to call the function print_self Line number 465
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains print_self
	lw	$t1 28($t1) # This is position of method print_self
	jalr		$t1
	la	$a0 str_const1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call out_string. Compiler does: Pushes parameter of function out_string onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label180 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 466
	jal	_dispatch_abort
label180:# In dispatch_class. Marker to call the function out_string Line number 466
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains out_string
	lw	$t1 12($t1) # This is position of method out_string
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label181 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label181:# In dispatch_class. Marker to call the function s Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label182 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label182:# In dispatch_class. Marker to call the function k Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label183 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label183:# In dispatch_class. Marker to call the function app Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label184 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label184:# In dispatch_class. Marker to call the function i Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label185 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label185:# In dispatch_class. Marker to call the function app Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label186 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label186:# In dispatch_class. Marker to call the function i Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label187 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label187:# In dispatch_class. Marker to call the function app Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call beta_reduce. Compiler does: Pushes parameter of function beta_reduce onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label188 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 467
	jal	_dispatch_abort
label188:# In dispatch_class. Marker to call the function beta_reduce Line number 467
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains beta_reduce
	lw	$t1 52($t1) # This is position of method beta_reduce
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label189 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label189:# In dispatch_class. Marker to call the function k Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label190 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label190:# In dispatch_class. Marker to call the function i Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label191 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label191:# In dispatch_class. Marker to call the function app Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label192 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label192:# In dispatch_class. Marker to call the function i Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label193 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label193:# In dispatch_class. Marker to call the function app Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call beta_reduce. Compiler does: Pushes parameter of function beta_reduce onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label194 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 468
	jal	_dispatch_abort
label194:# In dispatch_class. Marker to call the function beta_reduce Line number 468
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains beta_reduce
	lw	$t1 52($t1) # This is position of method beta_reduce
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label195 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 469
	jal	_dispatch_abort
label195:# In dispatch_class. Marker to call the function i Line number 469
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label196 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 469
	jal	_dispatch_abort
label196:# In dispatch_class. Marker to call the function i Line number 469
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label197 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 469
	jal	_dispatch_abort
label197:# In dispatch_class. Marker to call the function app Line number 469
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label198 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 469
	jal	_dispatch_abort
label198:# In dispatch_class. Marker to call the function gen_code Line number 469
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 64($t1) # This is position of method gen_code
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label199 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label199:# In dispatch_class. Marker to call the function s Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label200 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label200:# In dispatch_class. Marker to call the function k Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label201 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label201:# In dispatch_class. Marker to call the function app Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label202 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label202:# In dispatch_class. Marker to call the function i Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label203 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label203:# In dispatch_class. Marker to call the function app Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label204 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label204:# In dispatch_class. Marker to call the function i Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label205 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label205:# In dispatch_class. Marker to call the function app Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label206 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 470
	jal	_dispatch_abort
label206:# In dispatch_class. Marker to call the function gen_code Line number 470
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 64($t1) # This is position of method gen_code
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label207 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label207:# In dispatch_class. Marker to call the function i Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label208 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label208:# In dispatch_class. Marker to call the function k Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label209 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label209:# In dispatch_class. Marker to call the function app Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label210 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label210:# In dispatch_class. Marker to call the function s Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label211 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label211:# In dispatch_class. Marker to call the function app Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label212 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label212:# In dispatch_class. Marker to call the function s Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label213 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 471
	jal	_dispatch_abort
label213:# In dispatch_class. Marker to call the function app Line number 471
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label214 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label214:# In dispatch_class. Marker to call the function k Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label215 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label215:# In dispatch_class. Marker to call the function app Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label216 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label216:# In dispatch_class. Marker to call the function s Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label217 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label217:# In dispatch_class. Marker to call the function app Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label218 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label218:# In dispatch_class. Marker to call the function i Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label219 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label219:# In dispatch_class. Marker to call the function app Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label220 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label220:# In dispatch_class. Marker to call the function k Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label221 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label221:# In dispatch_class. Marker to call the function app Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label222 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label222:# In dispatch_class. Marker to call the function i Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label223 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label223:# In dispatch_class. Marker to call the function app Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label224 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 472
	jal	_dispatch_abort
label224:# In dispatch_class. Marker to call the function gen_code Line number 472
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 64($t1) # This is position of method gen_code
	jalr		$t1
	move	$a0 $s0
	bne	$a0 $zero label225 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label225:# In dispatch_class. Marker to call the function i Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains i
	lw	$t1 40($t1) # This is position of method i
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label226 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label226:# In dispatch_class. Marker to call the function k Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label227 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label227:# In dispatch_class. Marker to call the function s Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label228 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label228:# In dispatch_class. Marker to call the function app Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label229 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label229:# In dispatch_class. Marker to call the function app Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label230 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label230:# In dispatch_class. Marker to call the function k Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains k
	lw	$t1 44($t1) # This is position of method k
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label231 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label231:# In dispatch_class. Marker to call the function s Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label232 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label232:# In dispatch_class. Marker to call the function s Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains s
	lw	$t1 48($t1) # This is position of method s
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label233 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label233:# In dispatch_class. Marker to call the function app Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label234 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label234:# In dispatch_class. Marker to call the function app Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call app. Compiler does: Pushes parameter of function app onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label235 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label235:# In dispatch_class. Marker to call the function app Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains app
	lw	$t1 36($t1) # This is position of method app
	jalr		$t1
	sw	$a0 0($sp) # In dispatch_class. Programmer wants: Call gen_code. Compiler does: Pushes parameter of function gen_code onto stack
# The garbage collector has been turned on by -g so notifying
	addiu	$sp $sp -4 # Moving sp to maintain invariant.
	move	$a0 $s0
	bne	$a0 $zero label236 # The type is SELF_TYPE.  Checking that oject whose function we will call is not null
	la	$a0 str_const0
	li	$t1 473
	jal	_dispatch_abort
label236:# In dispatch_class. Marker to call the function gen_code Line number 473
	lw	$t1 8($a0) # In dispatch_class. Getting location of dispatch table which contains gen_code
	lw	$t1 64($t1) # This is position of method gen_code
	jalr		$t1
	la	$a0 int_const1
	lw	$fp 12($sp) # Code at end of function main. From class Main
	lw	$s0 8($sp) # Code at end of function main. From class Main
	lw	$ra 4($sp) # Code at end of function main. From class Main
	addiu	$sp $sp 12 # Code at end of function main. From class Main
	jr	$ra	 # Code at end of function main. From class Main

# end of generated code
#ANN(COOLCLASS, "Object", "_no_class")
#ANN(COOLMETHOD, "Object", "abort", "Object")
#ANN(COOLMETHOD, "Object", "type_name", "String")
#ANN(COOLMETHOD, "Object", "copy", "SELF_TYPE")
#ANN(COOLCLASS, "String", "Object", "Int", "_prim_slot")
#ANN(COOLMETHOD, "String", "length", "Int")
#ANN(COOLMETHOD, "String", "concat", "String", "String")
#ANN(COOLMETHOD, "String", "substr", "Int", "Int", "String")
#ANN(COOLCLASS, "Bool", "Object", "_prim_slot")
#ANN(COOLCLASS, "Int", "Object", "_prim_slot")
#ANN(COOLCLASS, "IO", "Object")
#ANN(COOLMETHOD, "IO", "out_string", "String", "SELF_TYPE")
#ANN(COOLMETHOD, "IO", "out_int", "Int", "SELF_TYPE")
#ANN(COOLMETHOD, "IO", "in_string", "String")
#ANN(COOLMETHOD, "IO", "in_int", "Int")
#ANN(COOLCLASS, "VarList","IO")
  #ANN(COOLMETHOD, "VarList", "isNil", "Bool")
  #ANN(COOLMETHOD, "VarList", "head", "Variable")
  #ANN(COOLMETHOD, "VarList", "tail", "VarList")
  #ANN(COOLMETHOD, "VarList", "add", "Variable", "VarList")
  #ANN(COOLMETHOD, "VarList", "print", "SELF_TYPE")
#ANN(COOLCLASS, "VarListNE","VarList", "Variable", "VarList")
  #ANN(COOLMETHOD, "VarListNE", "isNil", "Bool")
  #ANN(COOLMETHOD, "VarListNE", "head", "Variable")
  #ANN(COOLMETHOD, "VarListNE", "tail", "VarList")
  #ANN(COOLMETHOD, "VarListNE", "init", "Variable", "VarList", "VarListNE")
  #ANN(COOLMETHOD, "VarListNE", "print", "SELF_TYPE")
#ANN(COOLCLASS, "LambdaList","Object")
  #ANN(COOLMETHOD, "LambdaList", "isNil", "Bool")
  #ANN(COOLMETHOD, "LambdaList", "headE", "VarList")
  #ANN(COOLMETHOD, "LambdaList", "headC", "Lambda")
  #ANN(COOLMETHOD, "LambdaList", "headN", "Int")
  #ANN(COOLMETHOD, "LambdaList", "tail", "LambdaList")
  #ANN(COOLMETHOD, "LambdaList", "add", "VarList", "Lambda", "Int", "LambdaList")
#ANN(COOLCLASS, "LambdaListNE","LambdaList", "Lambda", "Int", "VarList", "LambdaList")
  #ANN(COOLMETHOD, "LambdaListNE", "isNil", "Bool")
  #ANN(COOLMETHOD, "LambdaListNE", "headE", "VarList")
  #ANN(COOLMETHOD, "LambdaListNE", "headC", "Lambda")
  #ANN(COOLMETHOD, "LambdaListNE", "headN", "Int")
  #ANN(COOLMETHOD, "LambdaListNE", "tail", "LambdaList")
  #ANN(COOLMETHOD, "LambdaListNE", "init", "VarList", "Lambda", "Int", "LambdaList", "LambdaListNE")
#ANN(COOLCLASS, "LambdaListRef","Object", "Int", "LambdaList")
  #ANN(COOLMETHOD, "LambdaListRef", "isNil", "Bool")
  #ANN(COOLMETHOD, "LambdaListRef", "headE", "VarList")
  #ANN(COOLMETHOD, "LambdaListRef", "headC", "Lambda")
  #ANN(COOLMETHOD, "LambdaListRef", "headN", "Int")
  #ANN(COOLMETHOD, "LambdaListRef", "reset", "SELF_TYPE")
  #ANN(COOLMETHOD, "LambdaListRef", "add", "VarList", "Lambda", "Int")
  #ANN(COOLMETHOD, "LambdaListRef", "removeHead", "SELF_TYPE")
#ANN(COOLCLASS, "Expr","IO")
  #ANN(COOLMETHOD, "Expr", "print_self", "SELF_TYPE")
  #ANN(COOLMETHOD, "Expr", "beta", "Expr")
  #ANN(COOLMETHOD, "Expr", "substitute", "Variable", "Expr", "Expr")
  #ANN(COOLMETHOD, "Expr", "gen_code", "VarList", "LambdaListRef", "SELF_TYPE")
#ANN(COOLCLASS, "Variable","Expr", "String")
  #ANN(COOLMETHOD, "Variable", "init", "String", "Variable")
  #ANN(COOLMETHOD, "Variable", "print_self", "SELF_TYPE")
  #ANN(COOLMETHOD, "Variable", "beta", "Expr")
  #ANN(COOLMETHOD, "Variable", "substitute", "Variable", "Expr", "Expr")
  #ANN(COOLMETHOD, "Variable", "gen_code", "VarList", "LambdaListRef", "SELF_TYPE")
#ANN(COOLCLASS, "Lambda","Expr", "Variable", "Expr")
  #ANN(COOLMETHOD, "Lambda", "init", "Variable", "Expr", "Lambda")
  #ANN(COOLMETHOD, "Lambda", "print_self", "SELF_TYPE")
  #ANN(COOLMETHOD, "Lambda", "beta", "Expr")
  #ANN(COOLMETHOD, "Lambda", "apply", "Expr", "Expr")
  #ANN(COOLMETHOD, "Lambda", "substitute", "Variable", "Expr", "Expr")
  #ANN(COOLMETHOD, "Lambda", "gen_code", "VarList", "LambdaListRef", "SELF_TYPE")
  #ANN(COOLMETHOD, "Lambda", "gen_closure_code", "Int", "VarList", "LambdaListRef", "SELF_TYPE")
#ANN(COOLCLASS, "App","Expr", "Expr", "Expr")
  #ANN(COOLMETHOD, "App", "init", "Expr", "Expr", "App")
  #ANN(COOLMETHOD, "App", "print_self", "SELF_TYPE")
  #ANN(COOLMETHOD, "App", "beta", "Expr")
  #ANN(COOLMETHOD, "App", "substitute", "Variable", "Expr", "Expr")
  #ANN(COOLMETHOD, "App", "gen_code", "VarList", "LambdaListRef", "SELF_TYPE")
#ANN(COOLCLASS, "Term","IO")
  #ANN(COOLMETHOD, "Term", "var", "String", "Variable")
  #ANN(COOLMETHOD, "Term", "lam", "Variable", "Expr", "Lambda")
  #ANN(COOLMETHOD, "Term", "app", "Expr", "Expr", "App")
  #ANN(COOLMETHOD, "Term", "i", "Expr")
  #ANN(COOLMETHOD, "Term", "k", "Expr")
  #ANN(COOLMETHOD, "Term", "s", "Expr")
#ANN(COOLCLASS, "Main","Term")
  #ANN(COOLMETHOD, "Main", "beta_reduce", "Expr", "Expr")
  #ANN(COOLMETHOD, "Main", "eval_class", "SELF_TYPE")
  #ANN(COOLMETHOD, "Main", "closure_class", "SELF_TYPE")
  #ANN(COOLMETHOD, "Main", "gen_code", "Expr", "SELF_TYPE")
  #ANN(COOLMETHOD, "Main", "main", "Int")
