#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[623] =
    {   0,
        0,    0,    7,    7,   11,   11,    2,    2,   61,   59,
       57,   58,   10,   54,   55,   45,   43,   53,   44,   52,
       46,   35,   56,   51,   41,   42,   47,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   48,
       49,   50,    7,    7,    5,    8,    8,    8,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   11,   11,   14,   15,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   59,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       57,    4,    9,    1,   35,   39,   40,   38,   37,   37,
       37,   37,   37,   19,   18,   20,   37,   37,   37,   37,

       37,   29,   37,   37,   37,   36,   36,   36,   36,   36,
       36,   19,   18,   20,   36,   36,   36,   36,   36,   29,
       36,   36,   36,   36,    7,    7,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       12,   13,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   37,   37,   37,   37,   37,   37,   22,
       37,   30,   32,   37,   37,   37,   36,   36,   36,   36,
       36,   36,   36,   22,   36,   30,   32,   36,   36,   36,
       36,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   27,   37,   17,   28,   37,
       37,   23,   24,   25,   37,   27,   36,   17,   28,   36,
       36,   36,   23,   24,   25,   33,   36,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   16,   37,   37,   26,   16,   34,   36,
       36,   26,    7,    7,    7,    7,    7,    7,    7,    7,
        7,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   37,
       31,   36,   31,    7,    7,    7,    7,   11,   11,   11,

       11,    2,    2,    2,    2,   37,   36,    7,    7,   11,
       11,    2,    2,   21,   21,    7,    7,   11,   11,    2,
        2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
        1,   38,    1,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   41,   46,   47,   41,   41,   48,   41,   49,
       50,   51,   41,   52,   53,   54,   55,   56,   57,   41,
       41,   41,   58,    1,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    1,    2,    3,    4,    4,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[635] =
    {   0,
        0,    0,   60,    0,  120,    0,  180,    0,  669, 3062,
      617, 3062, 3062,  610, 3062,  610, 3062, 3062,  603, 3062,
     3062,  599, 3062, 3062,  231,  572, 3062,    0,  222,  216,
      216,  222,  222,  229,  220,  224,  230,  231,    0,  240,
      250,  262,  261,  257,  261,  259,  262,  267,  269, 3062,
     3062, 3062,    0,  581, 3062,  575, 3062,  570,    0,    0,
        0,    0,    0,  546,    0,    0,  306,  522,    0,  323,
      383,  316,  323,  424,  384,  385,  327,  338,  390,  419,
      477,  537,  470,  428,  578,  477,  484,  426,  530,  541,
      546,    0,    0,    0,    0,  528, 3062, 3062,    0,    0,

        0,    0,    0,    0,    0,    0,  503,    0,    0,  311,
      466,    0,  631,  691,  551,  581,  732,  631,  632,  638,
      637,  692,  695,  458,  785,  845,  582,  697,  886,  734,
      785,  708,  778,  846,  791,    0,    0,    0,    0,  456,
     3062,    0,    0,    0,    0,    0,    0,    0,    0,  409,
        0,    0,  312,  401,    0,  939,  999,  694,  794, 1040,
      847,  888,  882,  932,  939,  943, 1093, 1153,  735,  946,
     1194, 1000, 1001, 1036, 1042, 1093, 1006,    0,    0,    0,
      388, 3062, 3062, 3062,  376, 3062, 3062, 3062,    0,  264,
      280,  293,  325,    0,    0,  327,  318,  323,  329,  323,

      342,    0,  376,  383,  390,    0,  387,  430,  427,  442,
      435,    0,    0,  473,  464,  468,  476,  472,  477,    0,
      483,  518,  508,  517,    0,  360, 3062,  335,    0,    0,
        0,  792,  848,  889, 1094,  948, 1015, 1095, 1098, 1100,
     1146, 1155, 1159, 1170, 1169, 1200, 1201, 1224, 1218, 1234,
     1233, 1235, 1237, 1250, 1256, 1266, 1269, 1271, 1282, 1273,
     1292, 1305, 1298, 1314, 1323, 1330, 1328,    0,  328,  305,
        0,    0,    0, 1332, 1341, 1359, 1362, 1363, 1364, 1368,
     1393, 1378, 1389, 1400, 1407, 1418, 1425, 1429, 1443, 1434,
     3062, 3062, 1440, 1456, 1450, 1466, 1465, 1472, 1475, 1482,

     1498, 1497, 1501, 1512, 1511, 1530, 1488, 1537, 1551, 1541,
     1546,    0,  306,  283,    0,    0,    0, 1552, 1570, 1577,
     1581, 1584, 1587, 1588, 1611, 1602, 1613, 1624, 1628, 1635,
     1642, 1651, 1660, 1666, 1667, 1677, 1683, 1696, 1692, 1698,
     1699, 1713, 1717, 1714, 1732, 1728, 1747, 1749, 1731, 1762,
     1781, 1771, 1780,  544,  567,  581,  592,  600,  623,    0,
      623,    0,    0,  636,  639,  698,  735,  736,  783,  788,
      783,  814,  819,    0,  839,    0,    0,  851,  851,  889,
      933, 1794, 1803, 1813, 1824, 1830, 1819, 1820, 1845, 1835,
     1851, 1860, 1861, 1864, 1874, 1883, 1893, 1904, 1887, 1910,

     1919, 1923, 1925, 1940, 1942, 1944, 1946, 1957, 1959, 1976,
     1978, 1989, 1999, 2008, 1995, 1982, 2018, 2014, 2031, 2033,
     2035, 2037, 2048, 2054, 2069, 2058, 2071, 2088, 2075, 2090,
     2106, 2101, 2107, 2111, 2124, 2138, 2120, 2141, 2143, 2160,
     2170, 2173, 2175, 2159, 2191, 2186, 2196, 2200, 2209, 2207,
     2226, 2223, 2240, 2239, 2245, 2262, 2269, 2255, 2276, 2272,
     2285, 2294, 2301, 2308, 2295,    0,  931,    0,    0,  938,
      948,    0,    0,    0,  968,    0,  969,    0,    0, 1009,
     1034, 1040,    0,    0,    0,    0, 1047, 2298, 2311, 2317,
     2327, 2334, 2333, 2343, 2348, 2349, 2370, 2359, 2372, 2373,

     2375, 2402, 2396, 2407, 2389, 2391, 2412, 2413, 2438, 2423,
     2436, 2437, 2439, 2460, 2463, 2453, 2474, 2476, 2485, 2478,
     2487, 2503, 2508, 2510, 2517, 2519, 2524, 2533, 2535, 2540,
     2550, 2551, 2556, 2557, 2567, 2580, 2583, 2573, 2586, 2596,
     2605, 2599, 2615, 2618, 2622, 2632, 2637, 2647, 2631, 2653,
     2658, 2662, 2664,    0, 1069, 1094,    0,    0,    0, 1102,
     1107,    0, 2663, 2687, 2677, 2693, 2696, 2698, 2702, 2717,
     2703, 2719, 2728, 2738, 2734, 2743, 2744, 2760, 2770, 2749,
     2774, 2776, 2789, 2791, 2800, 2805, 2807, 2818, 2816, 1148,
        0, 1154,    0, 2823, 2822, 2839, 2832, 2848, 2855, 2858,

     2861, 2871, 2880, 2887, 2890, 1173, 1182, 2896, 2906, 2912,
     2922, 2923, 2933,    0,    0, 2944, 2949, 2954, 2959, 2960,
     2963, 3062,  256,  253, 3011, 3016, 3021, 3026, 3031, 3036,
     3041, 3046, 3051, 3056
    } ;

static yyconst flex_int16_t yy_def[635] =
    {   0,
      622,    1,  622,    3,  622,    5,  622,    7,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  622,
      622,  622,  625,  625,  622,  622,  622,  622,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  626,
      626,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      627,  627,   82,   82,   82,   82,   82,   82,   82,   82,
       82,  625,  625,  625,  628,  628,  622,  622,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  629,  629,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  630,  631,  631,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  628,  628,  628,  632,  632,
      622,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  633,  633,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  634,  634,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  632,  632,  632,
      622,  622,  622,  622,  622,  622,  622,  622,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  625,  625,  622,  625,  625,  625,
      625,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,  628,  628,  628,
      628,  628,  628,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      622,  622,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  632,  632,  632,  632,  632,  632,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  623,  623,  623,  623,  624,  624,  624,
      624,  624,   71,   71,   71,   71,   82,   82,   82,   82,
       82,  114,  114,  114,  114,  126,  126,  126,  126,  126,
      157,  157,  157,  157,  168,  168,  168,  168,  168,  623,
      623,  624,  624,   71,   71,   82,   82,  114,  114,  126,

      126,  157,  157,  168,  168,  623,  624,   71,   82,  114,
      126,  157,  168,  623,  624,   71,   82,  114,  126,  157,
      168,    0,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622
    } ;

static yyconst flex_int16_t yy_nxt[3123] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   10,   27,   28,
       28,   29,   28,   30,   31,   28,   32,   33,   34,   35,
       36,   28,   28,   37,   28,   28,   38,   10,   10,   39,
       39,   40,   39,   41,   42,   39,   43,   44,   45,   46,
       47,   39,   39,   48,   39,   39,   49,   50,   51,   52,
       53,   54,   55,   53,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   53,   69,   70,
       70,   71,   70,   72,   73,   70,   74,   75,   76,   77,
       78,   70,   70,   79,   70,   70,   80,   53,   53,   81,

       81,   82,   81,   83,   84,   81,   85,   86,   87,   88,
       89,   81,   81,   90,   81,   81,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,   95,  112,  113,
      113,  114,  113,  115,  116,  113,  117,  118,  119,  120,
      121,  113,  113,  122,  113,  113,  123,  124,   95,  125,
      125,  126,  125,  127,  128,  125,  129,  130,  131,  132,
      133,  125,  125,  134,  125,  125,  135,  136,  137,  138,
      139,  140,  141,  139,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  139,  155,  156,

      156,  157,  156,  158,  159,  156,  160,  161,  162,  163,
      164,  156,  156,  165,  156,  156,  166,  139,  139,  167,
      167,  168,  167,  169,  170,  167,  171,  172,  173,  174,
      175,  167,  167,  176,  167,  167,  177,  178,  179,  180,
      186,  190,  194,  192,  202,  198,  195,  187,  193,  191,
      196,  199,  200,  203,  197,  204,  205,  206,  201,  207,
      189,  190,  194,  192,  202,  198,  195,  208,  193,  191,
      196,  199,  200,  203,  197,  204,  205,  209,  201,  207,
      216,  211,  210,  220,  218,  213,  217,  208,  212,  214,
      219,  221,  222,  215,  224,  314,  354,  209,  223,  355,

      216,  211,  210,  220,  218,  213,  217,  313,  212,  214,
      219,  221,  222,  215,  224,  229,  354,  270,  223,  355,
      271,  315,  230,  225,  225,  356,  225,  272,  316,  269,
      225,  225,  225,  225,  225,  232,  225,  225,  225,  225,
      225,  225,  232,  235,  357,  356,  232,  228,  236,  237,
      232,  245,  358,  359,  232,  232,  360,  232,  361,  362,
      225,  226,  232,  235,  357,  232,  232,  246,  236,  237,
      232,  245,  358,  359,  232,  363,  360,  232,  361,  362,
      225,  225,  225,  225,  225,  232,  225,  246,  185,  181,
      225,  225,  225,  225,  225,  363,  225,  225,  225,  225,

      225,  225,  233,  232,  232,  364,  365,  241,  243,  232,
      234,  232,  232,  242,  244,  247,  366,  232,  317,  367,
      225,  314,  233,  232,  232,  364,  365,  241,  243,  232,
      234,  232,  232,  242,  244,  247,  366,  232,  232,  367,
      225,  225,  225,  232,  248,  249,  232,  254,  238,  368,
      263,  232,  239,  249,  255,  249,  240,  313,  232,  369,
      292,  370,  371,  232,  248,  249,  232,  254,  238,  368,
      263,  232,  239,  249,  255,  249,  240,  225,  225,  369,
      225,  370,  371,  273,  225,  225,  225,  225,  225,  249,
      225,  225,  225,  225,  225,  225,  249,  252,  372,  373,

      259,  374,  253,  249,  249,  375,  260,  261,  376,  249,
      377,  249,  378,  262,  225,  270,  249,  252,  372,  373,
      259,  374,  253,  249,  249,  375,  260,  261,  376,  269,
      377,  249,  378,  262,  225,  225,  225,  225,  225,  231,
      225,  379,  380,  381,  225,  225,  225,  225,  225,  249,
      225,  225,  225,  225,  225,  225,  250,  249,  228,  264,
      249,  379,  380,  381,  251,  249,  265,  466,  249,  249,
      274,  267,  266,  249,  225,  227,  250,  249,  277,  264,
      249,  182,  226,  278,  251,  249,  265,  466,  249,  188,
      274,  267,  266,  249,  225,  225,  225,  249,  277,  467,

      274,  293,  256,  278,  468,  249,  257,  279,  274,  296,
      258,  185,  184,  469,  297,  183,  182,  249,  181,  467,
      274,  293,  256,  470,  468,  249,  257,  279,  274,  296,
      258,  268,  268,  469,  297,  268,  268,  268,  268,  268,
      268,  268,  268,  470,  268,  268,  268,  268,  268,  268,
      274,  274,  471,  472,  283,  285,  274,  274,  274,  274,
      284,  286,  287,  473,  274,  274,  288,  474,  622,  622,
      274,  274,  471,  472,  283,  285,  274,  274,  274,  274,
      284,  286,  287,  473,  274,  274,  288,  474,  268,  268,
      268,  268,  268,  622,  622,  268,  268,  268,  268,  268,

      268,  268,  268,  622,  268,  268,  268,  268,  268,  268,
      275,  274,  622,  318,  274,  622,  298,  289,  276,  274,
      290,  321,  274,  299,  293,  475,  322,  293,  622,  622,
      275,  274,  307,  318,  274,  293,  298,  289,  276,  274,
      290,  321,  274,  299,  293,  475,  322,  293,  268,  268,
      268,  274,  307,  293,  335,  293,  280,  303,  476,  274,
      281,  293,  338,  304,  282,  622,  622,  339,  477,  622,
      622,  274,  622,  293,  335,  622,  280,  303,  476,  274,
      281,  293,  338,  304,  282,  268,  268,  339,  477,  268,
      268,  268,  268,  268,  268,  268,  268,  293,  268,  268,

      268,  268,  268,  268,  293,  293,  478,  308,  305,  479,
      293,  232,  293,  318,  306,  480,  311,  293,  293,  232,
      323,  318,  622,  622,  293,  293,  478,  308,  305,  479,
      293,  232,  293,  318,  306,  480,  311,  481,  293,  232,
      323,  318,  268,  268,  268,  268,  268,  622,  482,  268,
      268,  268,  268,  268,  268,  268,  268,  481,  268,  268,
      268,  268,  268,  268,  294,  293,  318,  232,  482,  483,
      327,  309,  295,  293,  318,  232,  328,  310,  484,  485,
      382,  622,  622,  622,  294,  293,  318,  232,  622,  483,
      327,  309,  295,  293,  318,  232,  328,  310,  484,  485,

      382,  318,  268,  268,  268,  293,  331,  318,  383,  318,
      300,  329,  486,  293,  301,  318,  232,  330,  302,  622,
      622,  318,  622,  622,  622,  293,  331,  318,  383,  318,
      300,  329,  486,  293,  301,  318,  232,  330,  302,  312,
      312,  622,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  318,  312,  312,  312,  312,  312,  312,  318,  318,
      487,  332,  318,  554,  333,  340,  318,  385,  334,  555,
      318,  318,  341,  335,  556,  232,  312,  622,  318,  318,
      487,  332,  318,  554,  333,  340,  318,  385,  334,  555,
      318,  557,  341,  335,  556,  232,  312,  312,  312,  312,

      312,  558,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  557,  312,  312,  312,  312,  312,  312,  319,  335,
      335,  558,  622,  345,  347,  335,  320,  335,  335,  346,
      348,  353,  559,  335,  232,  622,  312,  622,  319,  335,
      335,  622,  232,  345,  347,  335,  320,  335,  335,  346,
      348,  353,  559,  335,  232,  335,  312,  312,  312,  318,
      349,  335,  232,  335,  324,  560,  561,  318,  325,  335,
      562,  350,  326,  622,  622,  335,  622,  622,  622,  318,
      349,  335,  622,  335,  324,  560,  561,  318,  325,  335,
      562,  350,  326,  312,  312,  590,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  622,  312,  312,  312,  312,
      312,  312,  335,  232,  232,  590,  591,  232,  351,  232,
      335,  232,  232,  386,  352,  232,  384,  232,  592,  593,
      312,  622,  335,  232,  232,  387,  591,  232,  351,  232,
      335,  232,  232,  386,  352,  232,  384,  232,  592,  593,
      312,  312,  312,  312,  312,  387,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  232,  312,  312,  312,  312,
      312,  312,  336,  232,  232,  622,  622,  622,  232,  388,
      337,  606,  232,  622,  389,  232,  232,  607,  232,  232,
      312,  622,  336,  232,  232,  390,  232,  232,  232,  388,

      337,  606,  232,  391,  389,  614,  232,  607,  232,  232,
      312,  312,  312,  335,  615,  390,  232,  232,  342,  232,
      232,  335,  343,  391,  393,  614,  344,  232,  232,  392,
      622,  622,  622,  335,  615,  622,  622,  249,  342,  232,
      232,  335,  343,  232,  393,  249,  344,  232,  232,  392,
      394,  232,  396,  249,  249,  622,  398,  249,  622,  622,
      249,  249,  249,  232,  249,  249,  395,  397,  622,  249,
      394,  232,  396,  249,  249,  249,  398,  399,  622,  622,
      249,  249,  249,  249,  249,  249,  395,  397,  249,  249,
      249,  622,  249,  249,  400,  249,  249,  399,  249,  622,

      249,  249,  403,  249,  622,  249,  401,  622,  249,  249,
      249,  249,  249,  249,  400,  402,  249,  249,  249,  249,
      249,  249,  403,  622,  249,  249,  401,  622,  404,  249,
      622,  249,  249,  249,  622,  402,  622,  249,  405,  249,
      622,  249,  249,  406,  249,  249,  407,  249,  404,  249,
      249,  274,  249,  249,  409,  249,  622,  249,  405,  274,
      274,  249,  249,  406,  408,  622,  407,  249,  274,  249,
      249,  274,  622,  410,  409,  249,  622,  249,  411,  274,
      274,  274,  413,  274,  408,  622,  274,  274,  274,  274,
      274,  274,  622,  410,  412,  274,  622,  274,  411,  622,

      622,  274,  413,  274,  622,  274,  274,  274,  274,  274,
      274,  274,  274,  415,  412,  274,  274,  274,  414,  274,
      274,  622,  416,  622,  622,  274,  274,  274,  274,  417,
      622,  622,  274,  415,  274,  622,  274,  274,  414,  274,
      274,  622,  416,  418,  274,  274,  274,  274,  274,  417,
      622,  419,  274,  274,  274,  622,  274,  274,  420,  293,
      422,  274,  274,  418,  274,  274,  421,  293,  274,  424,
      274,  419,  274,  274,  622,  293,  274,  293,  420,  293,
      422,  274,  274,  293,  426,  293,  421,  293,  423,  424,
      274,  293,  293,  293,  293,  293,  622,  293,  425,  427,

      622,  293,  293,  293,  426,  293,  622,  293,  423,  293,
      622,  293,  293,  293,  293,  293,  293,  293,  425,  427,
      293,  293,  293,  428,  293,  293,  622,  293,  293,  293,
      293,  293,  429,  622,  430,  293,  293,  293,  293,  293,
      293,  431,  622,  428,  293,  293,  622,  432,  293,  293,
      293,  293,  429,  622,  430,  622,  293,  293,  293,  293,
      293,  431,  622,  433,  293,  293,  434,  432,  293,  293,
      293,  318,  437,  293,  435,  436,  293,  293,  293,  318,
      293,  622,  622,  433,  293,  293,  434,  622,  293,  318,
      293,  318,  437,  293,  435,  436,  439,  318,  293,  318,

      318,  622,  438,  441,  318,  622,  318,  318,  318,  318,
      622,  318,  622,  440,  318,  318,  439,  318,  622,  622,
      318,  318,  438,  441,  318,  622,  318,  318,  318,  318,
      318,  318,  318,  440,  318,  318,  442,  443,  318,  622,
      318,  318,  622,  318,  622,  622,  444,  318,  622,  318,
      318,  318,  318,  445,  318,  318,  442,  443,  318,  622,
      318,  318,  318,  318,  446,  622,  444,  318,  447,  318,
      318,  318,  622,  445,  318,  318,  622,  622,  318,  318,
      448,  318,  318,  449,  446,  318,  335,  318,  447,  318,
      318,  622,  450,  318,  335,  622,  335,  622,  318,  318,

      448,  622,  452,  449,  335,  318,  335,  318,  622,  451,
      335,  454,  450,  318,  335,  335,  335,  335,  335,  335,
      622,  622,  452,  335,  335,  455,  335,  622,  453,  451,
      335,  454,  335,  335,  622,  335,  335,  335,  335,  335,
      335,  335,  456,  335,  335,  455,  335,  335,  453,  457,
      335,  335,  335,  335,  622,  335,  335,  459,  335,  335,
      335,  335,  456,  622,  335,  458,  335,  335,  335,  457,
      335,  335,  622,  622,  335,  335,  335,  459,  335,  335,
      622,  335,  461,  460,  622,  458,  335,  622,  335,  335,
      335,  462,  622,  622,  335,  622,  335,  622,  335,  335,

      335,  335,  461,  460,  463,  464,  465,  335,  335,  335,
      335,  462,  622,  232,  622,  622,  622,  488,  335,  335,
      335,  232,  232,  622,  463,  464,  465,  335,  335,  622,
      232,  622,  232,  232,  622,  489,  490,  488,  232,  232,
      232,  232,  232,  232,  622,  491,  232,  232,  493,  232,
      232,  232,  232,  492,  232,  489,  490,  232,  232,  232,
      232,  622,  232,  232,  232,  491,  232,  232,  493,  232,
      232,  232,  232,  492,  232,  494,  622,  232,  232,  232,
      232,  622,  232,  232,  232,  622,  622,  495,  232,  496,
      232,  497,  232,  249,  622,  494,  622,  498,  232,  232,

      232,  249,  249,  232,  622,  622,  249,  495,  232,  496,
      249,  497,  249,  249,  249,  499,  500,  498,  622,  502,
      249,  249,  249,  249,  622,  501,  249,  622,  622,  249,
      249,  249,  249,  503,  249,  499,  500,  249,  249,  502,
      249,  622,  249,  249,  249,  501,  249,  622,  504,  249,
      249,  249,  249,  503,  622,  505,  622,  249,  249,  249,
      622,  249,  249,  249,  249,  249,  249,  249,  504,  249,
      249,  506,  249,  249,  507,  505,  249,  622,  249,  249,
      508,  249,  622,  249,  249,  249,  509,  249,  622,  249,
      622,  506,  622,  249,  507,  274,  249,  274,  249,  510,

      508,  274,  622,  274,  249,  274,  509,  622,  274,  274,
      511,  622,  512,  622,  274,  274,  274,  274,  274,  510,
      513,  274,  274,  274,  515,  274,  274,  274,  274,  274,
      511,  514,  512,  274,  274,  274,  274,  274,  274,  622,
      513,  274,  274,  622,  515,  274,  274,  274,  516,  622,
      274,  514,  274,  274,  274,  274,  274,  274,  274,  622,
      517,  274,  274,  518,  519,  274,  622,  293,  516,  622,
      274,  520,  274,  293,  274,  293,  274,  293,  274,  523,
      517,  293,  274,  518,  519,  293,  521,  293,  293,  622,
      293,  520,  522,  293,  293,  293,  293,  293,  293,  523,

      622,  293,  293,  524,  526,  293,  521,  293,  293,  293,
      293,  525,  522,  622,  293,  293,  293,  293,  293,  622,
      293,  622,  293,  524,  526,  293,  293,  293,  293,  293,
      293,  525,  622,  293,  293,  293,  527,  293,  528,  293,
      293,  622,  622,  293,  622,  293,  293,  531,  293,  622,
      293,  293,  529,  293,  293,  622,  527,  293,  528,  293,
      318,  530,  318,  293,  532,  293,  622,  531,  318,  622,
      318,  293,  529,  622,  622,  533,  622,  293,  318,  318,
      318,  530,  318,  534,  532,  293,  318,  318,  318,  318,
      318,  535,  318,  622,  318,  533,  536,  318,  318,  318,

      318,  622,  318,  534,  537,  318,  318,  318,  622,  318,
      318,  535,  318,  318,  318,  318,  536,  318,  318,  318,
      318,  538,  318,  318,  537,  318,  318,  539,  318,  622,
      318,  622,  622,  318,  541,  318,  318,  540,  318,  318,
      622,  538,  335,  318,  622,  335,  318,  539,  318,  542,
      335,  622,  622,  335,  541,  543,  318,  540,  335,  335,
      545,  622,  335,  544,  335,  335,  335,  335,  622,  542,
      335,  622,  335,  335,  335,  543,  622,  546,  335,  335,
      545,  335,  335,  544,  335,  547,  335,  335,  335,  335,
      622,  335,  335,  622,  335,  335,  335,  546,  548,  335,

      622,  335,  335,  335,  335,  547,  549,  622,  335,  335,
      622,  335,  335,  335,  335,  335,  335,  232,  548,  335,
      335,  550,  553,  335,  335,  232,  549,  335,  335,  551,
      232,  552,  335,  335,  335,  335,  232,  232,  232,  622,
      335,  550,  553,  563,  232,  232,  232,  335,  335,  551,
      232,  552,  232,  232,  232,  335,  232,  622,  232,  565,
      232,  232,  232,  563,  232,  564,  232,  232,  232,  622,
      232,  622,  232,  232,  232,  232,  232,  622,  249,  565,
      232,  232,  232,  622,  622,  564,  249,  232,  232,  232,
      232,  249,  249,  566,  249,  232,  232,  232,  249,  249,

      249,  622,  249,  622,  567,  622,  249,  622,  249,  232,
      249,  249,  249,  566,  249,  249,  249,  232,  249,  249,
      249,  249,  249,  249,  567,  568,  249,  569,  249,  249,
      249,  249,  249,  570,  249,  249,  249,  622,  249,  249,
      249,  249,  274,  249,  622,  568,  249,  569,  622,  249,
      274,  249,  249,  570,  249,  274,  274,  249,  274,  249,
      249,  571,  274,  274,  274,  249,  274,  622,  572,  622,
      274,  622,  274,  622,  622,  274,  274,  249,  274,  274,
      274,  571,  274,  274,  274,  249,  274,  274,  572,  574,
      274,  573,  274,  274,  622,  274,  622,  293,  622,  274,

      274,  274,  274,  274,  274,  293,  293,  274,  575,  574,
      274,  573,  274,  274,  293,  274,  622,  293,  622,  576,
      622,  274,  293,  274,  274,  293,  293,  293,  575,  293,
      293,  622,  274,  577,  293,  293,  293,  293,  293,  576,
      622,  622,  293,  293,  293,  579,  293,  293,  578,  293,
      293,  293,  293,  577,  293,  293,  293,  293,  293,  293,
      293,  622,  293,  293,  293,  579,  293,  293,  578,  293,
      318,  293,  293,  580,  293,  318,  318,  293,  318,  293,
      293,  622,  293,  318,  318,  622,  318,  293,  581,  293,
      318,  622,  318,  580,  318,  318,  318,  293,  318,  318,

      318,  622,  318,  318,  318,  318,  318,  318,  581,  583,
      318,  582,  318,  318,  318,  318,  622,  622,  335,  318,
      318,  622,  318,  318,  318,  318,  335,  318,  584,  583,
      318,  582,  318,  318,  335,  318,  622,  335,  335,  622,
      622,  335,  335,  318,  318,  335,  335,  585,  584,  335,
      335,  335,  318,  622,  335,  586,  335,  335,  335,  335,
      622,  335,  335,  622,  335,  335,  335,  585,  587,  335,
      335,  335,  335,  588,  335,  586,  335,  335,  335,  335,
      335,  335,  232,  335,  335,  335,  335,  589,  587,  335,
      232,  335,  335,  588,  335,  622,  232,  335,  622,  595,

      335,  335,  232,  335,  232,  335,  232,  589,  622,  335,
      232,  335,  232,  594,  232,  249,  232,  249,  622,  595,
      232,  249,  249,  249,  232,  249,  232,  622,  596,  249,
      249,  622,  232,  594,  232,  249,  249,  249,  274,  597,
      232,  249,  249,  249,  249,  249,  274,  274,  596,  249,
      249,  622,  622,  274,  598,  274,  249,  274,  274,  597,
      599,  274,  293,  293,  249,  274,  274,  274,  293,  622,
      293,  293,  622,  274,  598,  274,  293,  274,  622,  293,
      599,  274,  293,  293,  622,  274,  600,  293,  293,  293,
      293,  293,  601,  318,  622,  318,  293,  293,  622,  293,

      622,  318,  602,  318,  622,  622,  600,  293,  318,  293,
      318,  603,  601,  318,  622,  318,  318,  293,  318,  335,
      622,  318,  602,  318,  335,  622,  335,  335,  318,  622,
      318,  603,  335,  604,  335,  335,  318,  335,  318,  335,
      605,  232,  232,  335,  335,  335,  335,  335,  622,  232,
      232,  249,  335,  604,  335,  335,  608,  335,  249,  249,
      605,  232,  232,  335,  622,  335,  249,  274,  622,  232,
      232,  249,  609,  622,  274,  274,  608,  293,  249,  249,
      293,  610,  274,  622,  622,  293,  249,  274,  293,  622,
      318,  611,  609,  622,  274,  274,  622,  293,  318,  318,

      293,  610,  274,  622,  612,  293,  335,  318,  293,  335,
      318,  611,  622,  622,  335,  232,  622,  335,  318,  318,
      613,  622,  622,  232,  612,  249,  335,  318,  616,  335,
      622,  274,  622,  249,  335,  232,  622,  335,  617,  274,
      613,  293,  318,  232,  618,  249,  622,  622,  616,  293,
      318,  274,  335,  249,  619,  620,  622,  622,  617,  274,
      335,  293,  318,  232,  618,  621,  622,  622,  249,  293,
      318,  232,  335,  274,  619,  620,  249,  622,  293,  318,
      335,  274,  335,  232,  622,  621,  293,  318,  249,  622,
      335,  232,  622,  274,  622,  622,  249,  622,  293,  318,

      622,  274,  335,  622,  622,  622,  293,  318,  622,  622,
      335,  225,  622,  225,  622,  225,  232,  622,  232,  622,
      232,  249,  622,  249,  622,  249,  268,  622,  622,  268,
      268,  274,  622,  622,  274,  274,  291,  291,  291,  291,
      291,  293,  622,  622,  293,  293,  312,  622,  312,  312,
      312,  318,  622,  318,  318,  318,  335,  622,  335,  335,
      335,    9,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622
    } ;

static yyconst flex_int16_t yy_chk[3123] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       25,   29,   31,   30,   35,   33,   32,   25,   30,   29,
       32,   33,   34,   36,   32,   37,   38,  624,   34,   40,
      623,   29,   31,   30,   35,   33,   32,   40,   30,   29,
       32,   33,   34,   36,   32,   37,   38,   41,   34,   40,
       44,   42,   41,   46,   45,   43,   44,   40,   42,   43,
       45,   47,   48,   43,   49,  314,  190,   41,   48,  191,

       44,   42,   41,   46,   45,   43,   44,  313,   42,   43,
       45,   47,   48,   43,   49,   67,  190,  270,   48,  191,
      110,  153,   67,   70,   70,  192,   70,  110,  153,  269,
       70,   70,   70,   70,   70,   72,   70,   70,   70,   70,
       70,   70,   73,   72,  193,  192,   77,  228,   72,   73,
       73,   77,  196,  197,   77,   72,  198,   78,  199,  200,
       70,  226,   73,   72,  193,   78,   77,   78,   72,   73,
       73,   77,  196,  197,   77,  201,  198,   78,  199,  200,
       70,   70,   70,   71,   71,   78,   71,   78,  185,  181,
       71,   71,   71,   71,   71,  201,   71,   71,   71,   71,

       71,   71,   71,   75,   76,  203,  204,   75,   76,   79,
       71,   75,   76,   75,   76,   79,  205,   79,  154,  207,
       71,  150,   71,   75,   76,  203,  204,   75,   76,   79,
       71,   75,   76,   75,   76,   79,  205,   79,   80,  207,
       71,   71,   71,   74,   80,   88,   80,   84,   74,  208,
       88,   74,   74,   88,   84,   84,   74,  140,   80,  209,
      124,  210,  211,   74,   80,   88,   80,   84,   74,  208,
       88,   74,   74,   88,   84,   84,   74,   81,   81,  209,
       81,  210,  211,  111,   81,   81,   81,   81,   81,   83,
       81,   81,   81,   81,   81,   81,   86,   83,  214,  215,

       86,  216,   83,   87,   86,  217,   86,   87,  218,   83,
      219,   87,  221,   87,   81,  107,   86,   83,  214,  215,
       86,  216,   83,   87,   86,  217,   86,   87,  218,   96,
      219,   87,  221,   87,   81,   81,   81,   82,   82,   68,
       82,  222,  223,  224,   82,   82,   82,   82,   82,   89,
       82,   82,   82,   82,   82,   82,   82,   89,   64,   89,
       90,  222,  223,  224,   82,   91,   90,  354,   90,   89,
      115,   91,   90,   91,   82,   58,   82,   89,  115,   89,
       90,   56,   54,  115,   82,   91,   90,  354,   90,   26,
      115,   91,   90,   91,   82,   82,   82,   85,  115,  355,

      116,  127,   85,  115,  356,   85,   85,  116,  116,  127,
       85,   22,   19,  357,  127,   16,   14,   85,   11,  355,
      116,  127,   85,  358,  356,   85,   85,  116,  116,  127,
       85,  113,  113,  357,  127,  113,  113,  113,  113,  113,
      113,  113,  113,  358,  113,  113,  113,  113,  113,  113,
      118,  119,  359,  361,  118,  119,  121,  120,  118,  119,
      118,  119,  120,  364,  121,  120,  121,  365,    9,    0,
      118,  119,  359,  361,  118,  119,  121,  120,  118,  119,
      118,  119,  120,  364,  121,  120,  121,  365,  113,  113,
      113,  114,  114,    0,    0,  114,  114,  114,  114,  114,

      114,  114,  114,    0,  114,  114,  114,  114,  114,  114,
      114,  122,    0,  158,  123,    0,  128,  122,  114,  122,
      123,  158,  123,  128,  128,  366,  158,  132,    0,    0,
      114,  122,  132,  158,  123,  132,  128,  122,  114,  122,
      123,  158,  123,  128,  128,  366,  158,  132,  114,  114,
      114,  117,  132,  130,  169,  132,  117,  130,  367,  117,
      117,  130,  169,  130,  117,    0,    0,  169,  368,    0,
        0,  117,    0,  130,  169,    0,  117,  130,  367,  117,
      117,  130,  169,  130,  117,  125,  125,  169,  368,  125,
      125,  125,  125,  125,  125,  125,  125,  133,  125,  125,

      125,  125,  125,  125,  131,  133,  369,  133,  131,  370,
      135,  232,  131,  159,  131,  371,  135,  133,  135,  232,
      159,  159,    0,    0,  131,  133,  369,  133,  131,  370,
      135,  232,  131,  159,  131,  371,  135,  372,  135,  232,
      159,  159,  125,  125,  125,  126,  126,    0,  373,  126,
      126,  126,  126,  126,  126,  126,  126,  372,  126,  126,
      126,  126,  126,  126,  126,  134,  161,  233,  373,  375,
      161,  134,  126,  134,  161,  233,  161,  134,  378,  379,
      233,    0,    0,    0,  126,  134,  161,  233,    0,  375,
      161,  134,  126,  134,  161,  233,  161,  134,  378,  379,

      233,  163,  126,  126,  126,  129,  163,  162,  234,  163,
      129,  162,  380,  129,  129,  162,  234,  162,  129,    0,
        0,  163,    0,    0,    0,  129,  163,  162,  234,  163,
      129,  162,  380,  129,  129,  162,  234,  162,  129,  156,
      156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  164,  156,  156,  156,  156,  156,  156,  165,  164,
      381,  164,  166,  467,  165,  170,  165,  236,  166,  470,
      166,  164,  170,  170,  471,  236,  156,    0,  165,  164,
      381,  164,  166,  467,  165,  170,  165,  236,  166,  470,
      166,  475,  170,  170,  471,  236,  156,  156,  156,  157,

      157,  477,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  475,  157,  157,  157,  157,  157,  157,  157,  172,
      173,  477,    0,  172,  173,  177,  157,  172,  173,  172,
      173,  177,  480,  177,  237,    0,  157,    0,  157,  172,
      173,    0,  237,  172,  173,  177,  157,  172,  173,  172,
      173,  177,  480,  177,  237,  174,  157,  157,  157,  160,
      174,  175,  237,  174,  160,  481,  482,  160,  160,  175,
      487,  175,  160,    0,    0,  174,    0,    0,    0,  160,
      174,  175,    0,  174,  160,  481,  482,  160,  160,  175,
      487,  175,  160,  167,  167,  555,  167,  167,  167,  167,

      167,  167,  167,  167,  167,    0,  167,  167,  167,  167,
      167,  167,  176,  235,  238,  555,  556,  239,  176,  240,
      176,  235,  238,  239,  176,  239,  235,  240,  560,  561,
      167,    0,  176,  235,  238,  240,  556,  239,  176,  240,
      176,  235,  238,  239,  176,  239,  235,  240,  560,  561,
      167,  167,  167,  168,  168,  240,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  241,  168,  168,  168,  168,
      168,  168,  168,  241,  242,    0,    0,    0,  243,  241,
      168,  590,  242,    0,  242,  241,  243,  592,  245,  244,
      168,    0,  168,  241,  242,  243,  245,  244,  243,  241,

      168,  590,  242,  244,  242,  606,  243,  592,  245,  244,
      168,  168,  168,  171,  607,  243,  245,  244,  171,  246,
      247,  171,  171,  244,  247,  606,  171,  246,  247,  246,
        0,    0,    0,  171,  607,    0,    0,  249,  171,  246,
      247,  171,  171,  248,  247,  249,  171,  246,  247,  246,
      248,  248,  251,  250,  252,    0,  253,  249,    0,    0,
      251,  250,  252,  248,  253,  249,  250,  252,    0,  254,
      248,  248,  251,  250,  252,  255,  253,  254,    0,    0,
      251,  250,  252,  255,  253,  256,  250,  252,  257,  254,
      258,    0,  260,  256,  257,  255,  257,  254,  258,    0,

      260,  259,  260,  255,    0,  256,  258,    0,  257,  259,
      258,  261,  260,  256,  257,  259,  257,  263,  258,  261,
      260,  259,  260,    0,  262,  263,  258,    0,  261,  259,
        0,  261,  262,  264,    0,  259,    0,  263,  262,  261,
        0,  264,  265,  264,  262,  263,  265,  267,  261,  266,
      265,  274,  262,  264,  267,  267,    0,  266,  262,  274,
      275,  264,  265,  264,  266,    0,  265,  267,  275,  266,
      265,  274,    0,  275,  267,  267,    0,  266,  276,  274,
      275,  277,  278,  279,  266,    0,  276,  280,  275,  277,
      278,  279,    0,  275,  277,  280,    0,  282,  276,    0,

        0,  277,  278,  279,    0,  282,  276,  280,  283,  277,
      278,  279,  281,  282,  277,  280,  283,  282,  281,  284,
      281,    0,  283,    0,    0,  282,  285,  284,  283,  284,
        0,    0,  281,  282,  285,    0,  283,  286,  281,  284,
      281,    0,  283,  285,  287,  286,  285,  284,  288,  284,
        0,  286,  287,  290,  285,    0,  288,  286,  288,  293,
      290,  290,  289,  285,  287,  286,  289,  293,  288,  295,
      289,  286,  287,  290,    0,  294,  288,  295,  288,  293,
      290,  290,  289,  294,  297,  296,  289,  293,  294,  295,
      289,  298,  297,  296,  299,  294,    0,  295,  296,  298,

        0,  300,  299,  294,  297,  296,    0,  307,  294,  300,
        0,  298,  297,  296,  299,  307,  302,  301,  296,  298,
      303,  300,  299,  301,  302,  301,    0,  307,  303,  300,
      305,  304,  302,    0,  303,  307,  302,  301,  305,  304,
      303,  304,    0,  301,  302,  301,    0,  305,  303,  306,
      305,  304,  302,    0,  303,    0,  308,  306,  305,  304,
      310,  304,    0,  306,  308,  311,  308,  305,  310,  306,
      309,  318,  311,  311,  309,  310,  308,  306,  309,  318,
      310,    0,    0,  306,  308,  311,  308,    0,  310,  319,
      309,  318,  311,  311,  309,  310,  320,  319,  309,  318,

      321,    0,  319,  322,  320,    0,  323,  324,  321,  319,
        0,  322,    0,  321,  323,  324,  320,  319,    0,    0,
      321,  326,  319,  322,  320,    0,  323,  324,  321,  326,
      325,  322,  327,  321,  323,  324,  325,  326,  325,    0,
      327,  326,    0,  328,    0,    0,  327,  329,    0,  326,
      325,  328,  327,  328,  330,  329,  325,  326,  325,    0,
      327,  331,  330,  328,  329,    0,  327,  329,  330,  331,
      332,  328,    0,  328,  330,  329,    0,    0,  332,  333,
      332,  331,  330,  333,  329,  334,  335,  333,  330,  331,
      332,    0,  334,  334,  335,    0,  336,    0,  332,  333,

      332,    0,  337,  333,  336,  334,  335,  333,    0,  336,
      337,  339,  334,  334,  335,  338,  336,  340,  341,  339,
        0,    0,  337,  338,  336,  340,  341,    0,  338,  336,
      337,  339,  342,  344,    0,  338,  343,  340,  341,  339,
      342,  344,  343,  338,  343,  340,  341,  346,  338,  344,
      349,  345,  342,  344,    0,  346,  343,  346,  349,  345,
      342,  344,  343,    0,  343,  345,  347,  346,  348,  344,
      349,  345,    0,    0,  347,  346,  348,  346,  349,  345,
        0,  350,  348,  347,    0,  345,  347,    0,  348,  350,
      352,  350,    0,    0,  347,    0,  348,    0,  352,  353,

      351,  350,  348,  347,  351,  352,  353,  353,  351,  350,
      352,  350,    0,  382,    0,    0,    0,  382,  352,  353,
      351,  382,  383,    0,  351,  352,  353,  353,  351,    0,
      383,    0,  384,  382,    0,  383,  384,  382,  387,  388,
      384,  382,  383,  385,    0,  385,  387,  388,  387,  386,
      383,  385,  384,  386,  390,  383,  384,  386,  387,  388,
      384,    0,  390,  385,  389,  385,  387,  388,  387,  386,
      391,  385,  389,  386,  390,  389,    0,  386,  391,  392,
      393,    0,  390,  394,  389,    0,    0,  392,  393,  393,
      391,  394,  389,  395,    0,  389,    0,  395,  391,  392,

      393,  395,  396,  394,    0,    0,  399,  392,  393,  393,
      396,  394,  397,  395,  399,  396,  397,  395,    0,  399,
      397,  395,  396,  398,    0,  398,  399,    0,    0,  400,
      396,  398,  397,  400,  399,  396,  397,  400,  401,  399,
      397,    0,  402,  398,  403,  398,  401,    0,  401,  400,
      402,  398,  403,  400,    0,  403,    0,  400,  401,  404,
        0,  405,  402,  406,  403,  407,  401,  404,  401,  405,
      402,  406,  403,  407,  407,  403,  408,    0,  409,  404,
      408,  405,    0,  406,  408,  407,  409,  404,    0,  405,
        0,  406,    0,  407,  407,  410,  408,  411,  409,  410,

      408,  416,    0,  410,  408,  411,  409,    0,  412,  416,
      411,    0,  412,    0,  415,  410,  412,  411,  413,  410,
      413,  416,  415,  410,  415,  411,  413,  414,  412,  416,
      411,  414,  412,  418,  415,  414,  412,  417,  413,    0,
      413,  418,  415,    0,  415,  417,  413,  414,  417,    0,
      419,  414,  420,  418,  421,  414,  422,  417,  419,    0,
      420,  418,  421,  421,  422,  417,    0,  423,  417,    0,
      419,  423,  420,  424,  421,  423,  422,  426,  419,  426,
      420,  424,  421,  421,  422,  426,  424,  423,  425,    0,
      427,  423,  425,  424,  429,  423,  425,  426,  427,  426,

        0,  424,  429,  427,  429,  426,  424,  428,  425,  430,
      427,  428,  425,    0,  429,  428,  425,  430,  427,    0,
      432,    0,  429,  427,  429,  431,  433,  428,  432,  430,
      434,  428,    0,  431,  433,  428,  431,  430,  434,  437,
      432,    0,    0,  435,    0,  431,  433,  437,  432,    0,
      434,  435,  435,  431,  433,    0,  431,  436,  434,  437,
      438,  436,  439,  435,  438,  436,    0,  437,  438,    0,
      439,  435,  435,    0,    0,  439,    0,  436,  444,  440,
      438,  436,  439,  440,  438,  436,  444,  440,  438,  441,
      439,  441,  442,    0,  443,  439,  442,  441,  444,  440,

      442,    0,  443,  440,  443,  446,  444,  440,    0,  441,
      445,  441,  442,  446,  443,  447,  442,  441,  445,  448,
      442,  445,  443,  447,  443,  446,  450,  448,  449,    0,
      445,    0,    0,  446,  450,  447,  449,  449,  445,  448,
        0,  445,  452,  447,    0,  451,  450,  448,  449,  451,
      452,    0,    0,  451,  450,  452,  449,  449,  454,  453,
      454,    0,  452,  453,  455,  451,  454,  453,    0,  451,
      452,    0,  455,  451,  458,  452,    0,  455,  454,  453,
      454,  456,  458,  453,  455,  456,  454,  453,  457,  456,
        0,  460,  455,    0,  458,  459,  457,  455,  457,  460,

        0,  456,  458,  459,  461,  456,  459,    0,  457,  456,
        0,  460,  461,  462,  465,  459,  457,  488,  457,  460,
      463,  462,  465,  459,  461,  488,  459,  464,  463,  463,
      489,  464,  461,  462,  465,  464,  490,  488,  489,    0,
      463,  462,  465,  489,  490,  488,  491,  464,  463,  463,
      489,  464,  493,  492,  491,  464,  490,    0,  489,  493,
      493,  492,  494,  489,  490,  492,  491,  495,  496,    0,
      494,    0,  493,  492,  491,  495,  496,    0,  498,  493,
      493,  492,  494,    0,    0,  492,  498,  495,  496,  497,
      494,  499,  500,  497,  501,  495,  496,  497,  498,  499,

      500,    0,  501,    0,  499,    0,  498,    0,  505,  497,
      506,  499,  500,  497,  501,  503,  505,  497,  506,  499,
      500,  502,  501,  503,  499,  502,  504,  503,  505,  502,
      506,  507,  508,  504,  504,  503,  505,    0,  506,  507,
      508,  502,  510,  503,    0,  502,  504,  503,    0,  502,
      510,  507,  508,  504,  504,  511,  512,  509,  513,  507,
      508,  509,  510,  511,  512,  509,  513,    0,  511,    0,
      510,    0,  516,    0,    0,  511,  512,  509,  513,  514,
      516,  509,  515,  511,  512,  509,  513,  514,  511,  515,
      515,  514,  516,  517,    0,  518,    0,  520,    0,  514,

      516,  517,  515,  518,  519,  520,  521,  514,  519,  515,
      515,  514,  519,  517,  521,  518,    0,  520,    0,  521,
        0,  517,  522,  518,  519,  520,  521,  523,  519,  524,
      522,    0,  519,  524,  521,  523,  525,  524,  526,  521,
        0,    0,  522,  527,  525,  526,  526,  523,  525,  524,
      522,  527,  528,  524,  529,  523,  525,  524,  526,  530,
      528,    0,  529,  527,  525,  526,  526,  530,  525,  531,
      532,  527,  528,  531,  529,  533,  534,  531,  532,  530,
      528,    0,  529,  533,  534,    0,  535,  530,  533,  531,
      532,    0,  538,  531,  535,  533,  534,  531,  532,  536,

      538,    0,  537,  533,  534,  539,  535,  536,  533,  537,
      537,  536,  538,  539,  535,  540,    0,    0,  542,  536,
      538,    0,  537,  540,  541,  539,  542,  536,  541,  537,
      537,  536,  541,  539,  543,  540,    0,  544,  542,    0,
        0,  545,  543,  540,  541,  544,  542,  543,  541,  545,
      549,  546,  541,    0,  543,  546,  547,  544,  549,  546,
        0,  545,  543,    0,  547,  544,  548,  543,  547,  545,
      549,  546,  550,  548,  548,  546,  547,  551,  549,  546,
      550,  552,  563,  553,  547,  551,  548,  553,  547,  552,
      563,  553,  550,  548,  548,    0,  565,  551,    0,  565,

      550,  552,  563,  553,  565,  551,  564,  553,    0,  552,
      563,  553,  566,  564,  564,  567,  565,  568,    0,  565,
      566,  569,  571,  567,  565,  568,  564,    0,  569,  569,
      571,    0,  566,  564,  564,  567,  570,  568,  572,  570,
      566,  569,  571,  567,  570,  568,  572,  573,  569,  569,
      571,    0,    0,  575,  573,  573,  570,  574,  572,  570,
      574,  575,  576,  577,  570,  574,  572,  573,  580,    0,
      576,  577,    0,  575,  573,  573,  580,  574,    0,  578,
      574,  575,  576,  577,    0,  574,  578,  578,  580,  579,
      576,  577,  579,  581,    0,  582,  580,  579,    0,  578,

        0,  581,  582,  582,    0,    0,  578,  578,  583,  579,
      584,  583,  579,  581,    0,  582,  583,  579,  584,  585,
        0,  581,  582,  582,  586,    0,  587,  585,  583,    0,
      584,  583,  586,  587,  587,  589,  583,  588,  584,  585,
      588,  595,  594,  589,  586,  588,  587,  585,    0,  595,
      594,  597,  586,  587,  587,  589,  594,  588,  596,  597,
      588,  595,  594,  589,    0,  588,  596,  598,    0,  595,
      594,  597,  596,    0,  599,  598,  594,  600,  596,  597,
      601,  598,  599,    0,    0,  600,  596,  598,  601,    0,
      602,  600,  596,    0,  599,  598,    0,  600,  602,  603,

      601,  598,  599,    0,  602,  600,  604,  603,  601,  605,
      602,  600,    0,    0,  604,  608,    0,  605,  602,  603,
      604,    0,    0,  608,  602,  609,  604,  603,  608,  605,
        0,  610,    0,  609,  604,  608,    0,  605,  609,  610,
      604,  611,  612,  608,  610,  609,    0,    0,  608,  611,
      612,  610,  613,  609,  611,  612,    0,    0,  609,  610,
      613,  611,  612,  616,  610,  613,    0,    0,  617,  611,
      612,  616,  613,  618,  611,  612,  617,    0,  619,  620,
      613,  618,  621,  616,    0,  613,  619,  620,  617,    0,
      621,  616,    0,  618,    0,    0,  617,    0,  619,  620,

        0,  618,  621,    0,    0,    0,  619,  620,    0,    0,
      621,  625,    0,  625,    0,  625,  626,    0,  626,    0,
      626,  627,    0,  627,    0,  627,  628,    0,    0,  628,
      628,  629,    0,    0,  629,  629,  630,  630,  630,  630,
      630,  631,    0,    0,  631,  631,  632,    0,  632,  632,
      632,  633,    0,  633,  633,  633,  634,    0,  634,  634,
      634,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[60] =
    {   0,
       79,   81,   83,   94,   99,  103,  115,  117,  119,  130,
      142,  146,  150,  155,  162,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
      245,  246,  253,  258,  268,  278,  289,  300,  301,  302,
      303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  318,  327,  329,  337
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */

static int comment_num = 0;
/*
 * Define names for regular expressions here.
 * Integers are non-empty strings of digits 0-9.
 * Identifiers are strings (other than keywords) consisting ofletters, digits, and the underscore character.
 * Type identifiers begin with a capital letter.
 * object identifiersbegin with a lower case letter.
 */



#line 1498 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define SINGLE_LINE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 71 "cool.flex"



 /*
  *  single line comments
  */


#line 1752 "cool-lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 623 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3062 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 60 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 60 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 61 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 79 "cool.flex"
{ BEGIN(SINGLE_LINE);}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "cool.flex"
{}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 83 "cool.flex"
{
    curr_lineno ++;
    BEGIN(INITIAL);
}
	YY_BREAK
/*
  *  comments
  */
case 4:
YY_RULE_SETUP
#line 94 "cool.flex"
{
    comment_num ++;
    BEGIN(COMMENT);
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 99 "cool.flex"
{
    curr_lineno ++;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "cool.flex"
{
    comment_num --;
    if (comment_num == 0)
        BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 109 "cool.flex"
{
    cool_yylval.error_msg = "EOF in comment";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 115 "cool.flex"
{}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "cool.flex"
{}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 119 "cool.flex"
{
    cool_yylval.error_msg = "Unmatched *)";
    return ERROR;
}
	YY_BREAK
/*
  *  string constant
  */
case 10:
YY_RULE_SETUP
#line 130 "cool.flex"
{
    BEGIN(STRING);
    yymore();
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 135 "cool.flex"
{
    cool_yylval.error_msg = "EOF in string constant";
    BEGIN(INITIAL);
    yyrestart(yyin);
    return ERROR;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "cool.flex"
{
    yymore();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 146 "cool.flex"
{
    yymore();
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "cool.flex"
{
    curr_lineno ++;
    yymore();
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 155 "cool.flex"
{
    cool_yylval.error_msg = "Unterminated string constant";
    curr_lineno ++;
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 162 "cool.flex"
{
    std::string in(yytext, yyleng);
    in = in.substr(1, in.length() - 2);
    std::string::size_type nul_pos;

    if ((nul_pos = in.find_first_of('\0')) != std::string::npos) {
        cool_yylval.error_msg = "String contains null character";
        BEGIN(INITIAL);
        return ERROR;
    }

    std::string out = "";
    std::string::size_type pos;
    while ((pos = in.find_first_of("\\")) != std::string::npos) {
        out += in.substr(0, pos);
        if (pos >= in.length() - 1) {
            cool_yylval.error_msg = "Unterminated string constant";
            BEGIN(INITIAL);
            return ERROR;
        }
        
        switch(in[pos + 1]) {
            case 'b' :
            out += "\b";
            break;

            case 't' :
            out += "\t";
            break;

            case 'n' :
            out += "\n";
            break;

            case 'f' :
            out += "\f";
            break;

            default :
            out += in[pos + 1];
            break;
        }
        in = in.substr(pos + 2, in.length() - 2);
    }

    out += in;

    if (out.length() >= MAX_STR_CONST) {
        cool_yylval.error_msg = "String constant too long";
        BEGIN(INITIAL);
        return ERROR;
    }

    cool_yylval.symbol = stringtable.add_string((char *)out.c_str());
    BEGIN(INITIAL);
    return STR_CONST;
}
	YY_BREAK
/*
  *  keywords
  */
case 16:
YY_RULE_SETUP
#line 230 "cool.flex"
{  return (CLASS);  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 231 "cool.flex"
{  return (ELSE);   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 232 "cool.flex"
{  return (IF);     }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 233 "cool.flex"
{  return (FI);     }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 234 "cool.flex"
{  return (IN);     }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 235 "cool.flex"
{  return (INHERITS);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 236 "cool.flex"
{  return (LET);    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 237 "cool.flex"
{  return (LOOP);   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 238 "cool.flex"
{  return (POOL);   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 239 "cool.flex"
{  return (THEN);   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 240 "cool.flex"
{  return (WHILE);  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 241 "cool.flex"
{  return (CASE);   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 242 "cool.flex"
{  return (ESAC);   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 243 "cool.flex"
{  return (OF);     }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 244 "cool.flex"
{  return (NEW);    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 245 "cool.flex"
{  return (ISVOID); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 246 "cool.flex"
{  return (NOT);    }
	YY_BREAK
/*
  *  true and false
  */
case 33:
YY_RULE_SETUP
#line 253 "cool.flex"
{
    cool_yylval.boolean = true;
    return BOOL_CONST;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 258 "cool.flex"
{
    cool_yylval.boolean = false;
    return BOOL_CONST;
}
	YY_BREAK
/*
  *  integers
  */
case 35:
YY_RULE_SETUP
#line 268 "cool.flex"
{
    cool_yylval.symbol = inttable.add_string(yytext);
    return INT_CONST;
}
	YY_BREAK
/*
  *  object identifiers
  */
case 36:
YY_RULE_SETUP
#line 278 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return OBJECTID;
}
	YY_BREAK
/*
  *  type identifiers
  */
case 37:
YY_RULE_SETUP
#line 289 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return TYPEID;
}
	YY_BREAK
/*
  *  operators
  */
case 38:
YY_RULE_SETUP
#line 300 "cool.flex"
{ return (DARROW);   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 301 "cool.flex"
{  return (ASSIGN);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 302 "cool.flex"
{  return (LE);      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 303 "cool.flex"
{  return int('<');  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 304 "cool.flex"
{  return int('=');  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 305 "cool.flex"
{  return int('+');  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 306 "cool.flex"
{  return int('-');  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 307 "cool.flex"
{  return int('*');  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 308 "cool.flex"
{  return int('/');  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 309 "cool.flex"
{  return int('@');  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 310 "cool.flex"
{  return int('{');  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 311 "cool.flex"
{  return int('}');  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 312 "cool.flex"
{  return int('~');  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 313 "cool.flex"
{  return int(';');  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 314 "cool.flex"
{  return int('.');  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 315 "cool.flex"
{  return int(',');  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 316 "cool.flex"
{  return int('(');  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 317 "cool.flex"
{  return int(')');  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 318 "cool.flex"
{  return int(':');  }
	YY_BREAK
/*
  *  white space
  */
case 57:
YY_RULE_SETUP
#line 327 "cool.flex"
{}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 329 "cool.flex"
{  curr_lineno++; }
	YY_BREAK
/*
  *  error
  */
case 59:
YY_RULE_SETUP
#line 337 "cool.flex"
{
    cool_yylval.error_msg = yytext;
    return ERROR;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 343 "cool.flex"
ECHO;
	YY_BREAK
#line 2328 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SINGLE_LINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 623 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 623 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 622);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 343 "cool.flex"



